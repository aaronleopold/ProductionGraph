{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0","program":"/home/aaron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hashbrown","--edition=2018","/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"ahash\"","--cfg","feature=\"default\"","--cfg","feature=\"inline-more\"","--cfg","feature=\"rayon\"","-C","metadata=a22c3d15ac5d0f31","-C","extra-filename=-a22c3d15ac5d0f31","--out-dir","/home/aaron/Documents/cis4930/ProductionGraph/rs_alt_ds/target/rls/debug/deps","-L","dependency=/home/aaron/Documents/cis4930/ProductionGraph/rs_alt_ds/target/rls/debug/deps","--extern","ahash=/home/aaron/Documents/cis4930/ProductionGraph/rs_alt_ds/target/rls/debug/deps/libahash-53f0f5e6a15a21b7.rmeta","--extern","rayon=/home/aaron/Documents/cis4930/ProductionGraph/rs_alt_ds/target/rls/debug/deps/librayon-7d545ab4273e1908.rmeta","--cap-lints","allow","--cfg","has_extern_crate_alloc","--error-format=json","--sysroot","/home/aaron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/aaron/Documents/cis4930/ProductionGraph/rs_alt_ds/target/rls/debug/deps/libhashbrown-a22c3d15ac5d0f31.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[6753066664614790369,17119948747778313319]},"crate_root":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src","external_crates":[{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16221439354469382097,15565837348772828253]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15613252303691562375,4556165055238676072]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[12269617896898487533,65142111397584226]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15862783141653200230,4773813417861420487]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":5,"id":{"name":"rayon","disambiguator":[53684597433329702,17745442825469550905]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":6,"id":{"name":"std","disambiguator":[12673765241971086519,1979875191208036248]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":7,"id":{"name":"libc","disambiguator":[501305773035659233,3889300012469539238]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":8,"id":{"name":"unwind","disambiguator":[9126002216567348836,15610270334556716503]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":9,"id":{"name":"cfg_if","disambiguator":[9479301707518706798,13352731276321566042]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":10,"id":{"name":"backtrace","disambiguator":[15203654865662241151,17897348793673631766]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10290502124864695413,7672610073830174493]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":12,"id":{"name":"backtrace_sys","disambiguator":[14838544226648722576,13006716085524361330]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":13,"id":{"name":"hashbrown","disambiguator":[9246889555580827340,16878203682218964580]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":14,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8284748314555817558,4769950866534510046]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[14671874173783541769,17969261176539820175]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":16,"id":{"name":"either","disambiguator":[7811465513042805390,6086104441803124022]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":17,"id":{"name":"rayon_core","disambiguator":[2975051196372261463,10407853925115507192]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":18,"id":{"name":"crossbeam_queue","disambiguator":[1302923690896393236,10162107771795330418]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":19,"id":{"name":"cfg_if","disambiguator":[15827525173548159870,8372847108566091306]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":20,"id":{"name":"maybe_uninit","disambiguator":[3135054411158518149,428966938506063934]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":21,"id":{"name":"crossbeam_utils","disambiguator":[16707221010084441632,6942913062587343700]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":22,"id":{"name":"lazy_static","disambiguator":[8531607769344049769,5565090804460170418]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":23,"id":{"name":"crossbeam_deque","disambiguator":[9686919364008896169,6313826896139189287]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":24,"id":{"name":"crossbeam_epoch","disambiguator":[8434493080137955978,17587060078136853500]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":25,"id":{"name":"memoffset","disambiguator":[15367019596506690908,17902934150027359335]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":26,"id":{"name":"scopeguard","disambiguator":[14252963585335230406,10171379034036069408]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":27,"id":{"name":"num_cpus","disambiguator":[8439323298398023497,1552199230234993345]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/helpers.rs","num":28,"id":{"name":"libc","disambiguator":[2751302067583738983,14466167734934125449]}},{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","num":29,"id":{"name":"ahash","disambiguator":[10481356788885029406,8941376630342432187]}}],"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":0,"byte_end":3378,"line_start":1,"line_end":123,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":1586,"byte_end":1587,"line_start":59,"line_end":59,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"HashMap","parent":{"krate":0,"index":1784}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":1586,"byte_end":1587,"line_start":59,"line_end":59,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1786}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":1586,"byte_end":1587,"line_start":59,"line_end":59,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"HashSet","parent":{"krate":0,"index":1788}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":1586,"byte_end":1587,"line_start":59,"line_end":59,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1790}},{"kind":"Use","ref_id":{"krate":0,"index":771},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2916,"byte_end":2923,"line_start":108,"line_end":108,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1475},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2945,"byte_end":2952,"line_start":109,"line_end":109,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":0,"byte_end":3378,"line_start":1,"line_end":123,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":275},{"krate":0,"index":748},{"krate":0,"index":1428},{"krate":0,"index":1453},{"krate":0,"index":1784},{"krate":0,"index":1788},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1842},{"krate":0,"index":1856},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1847}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"! This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"! map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"! and `HashSet` types.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"! [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"! [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\n        must_use_candidate)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":814,"byte_end":920,"line_start":26,"line_end":30,"column_start":1,"column_end":3}},{"value":"warn(missing_docs)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":921,"byte_end":943,"line_start":31,"line_end":31,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":944,"byte_end":970,"line_start":32,"line_end":32,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":300},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67400,"byte_end":67407,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"ParIter","qualname":"::external_trait_impls::rayon::map::ParIter","value":"ParIter {  }","parent":null,"children":[{"krate":0,"index":305}],"decl_id":null,"docs":" Parallel iterator over shared references to entries in a map.","sig":null,"attributes":[{"value":"/ Parallel iterator over shared references to entries in a map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":66933,"byte_end":66998,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":66999,"byte_end":67002,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_iter`] method on [`HashMap`]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67003,"byte_end":67073,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ (provided by the [`IntoParallelRefIterator`] trait).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67074,"byte_end":67130,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67131,"byte_end":67166,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67167,"byte_end":67170,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`par_iter`]: /hashbrown/struct.HashMap.html#method.par_iter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67171,"byte_end":67235,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: /hashbrown/struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67236,"byte_end":67283,"line_start":16,"line_end":16,"column_start":1,"column_end":48}},{"value":"/ [`IntoParallelRefIterator`]: https://docs.rs/rayon/1.0/rayon/iter/trait.IntoParallelRefIterator.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67284,"byte_end":67388,"line_start":17,"line_end":17,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68614,"byte_end":68621,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"ParKeys","qualname":"::external_trait_impls::rayon::map::ParKeys","value":"ParKeys {  }","parent":null,"children":[{"krate":0,"index":330}],"decl_id":null,"docs":" Parallel iterator over shared references to keys in a map.","sig":null,"attributes":[{"value":"/ Parallel iterator over shared references to keys in a map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68311,"byte_end":68373,"line_start":52,"line_end":52,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68374,"byte_end":68377,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_keys`] method on [`HashMap`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68378,"byte_end":68449,"line_start":54,"line_end":54,"column_start":1,"column_end":72}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68450,"byte_end":68485,"line_start":55,"line_end":55,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68486,"byte_end":68489,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`par_keys`]: /hashbrown/struct.HashMap.html#method.par_keys","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68490,"byte_end":68554,"line_start":57,"line_end":57,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: /hashbrown/struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68555,"byte_end":68602,"line_start":58,"line_end":58,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":350},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69752,"byte_end":69761,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"ParValues","qualname":"::external_trait_impls::rayon::map::ParValues","value":"ParValues {  }","parent":null,"children":[{"krate":0,"index":355}],"decl_id":null,"docs":" Parallel iterator over shared references to values in a map.","sig":null,"attributes":[{"value":"/ Parallel iterator over shared references to values in a map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69441,"byte_end":69505,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69506,"byte_end":69509,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_values`] method on [`HashMap`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69510,"byte_end":69583,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69584,"byte_end":69619,"line_start":93,"line_end":93,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69620,"byte_end":69623,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ [`par_values`]: /hashbrown/struct.HashMap.html#method.par_values","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69624,"byte_end":69692,"line_start":95,"line_end":95,"column_start":1,"column_end":69}},{"value":"/ [`HashMap`]: /hashbrown/struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69693,"byte_end":69740,"line_start":96,"line_end":96,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":375},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":71079,"byte_end":71089,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"ParIterMut","qualname":"::external_trait_impls::rayon::map::ParIterMut","value":"ParIterMut {  }","parent":null,"children":[{"krate":0,"index":380}],"decl_id":null,"docs":" Parallel iterator over mutable references to entries in a map.","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable references to entries in a map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70590,"byte_end":70656,"line_start":128,"line_end":128,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70657,"byte_end":70660,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_iter_mut`] method on [`HashMap`]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70661,"byte_end":70735,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/ (provided by the [`IntoParallelRefMutIterator`] trait).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70736,"byte_end":70795,"line_start":131,"line_end":131,"column_start":1,"column_end":60}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70796,"byte_end":70831,"line_start":132,"line_end":132,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70832,"byte_end":70835,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ [`par_iter_mut`]: /hashbrown/struct.HashMap.html#method.par_iter_mut","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70836,"byte_end":70908,"line_start":134,"line_end":134,"column_start":1,"column_end":73}},{"value":"/ [`HashMap`]: /hashbrown/struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70909,"byte_end":70956,"line_start":135,"line_end":135,"column_start":1,"column_end":48}},{"value":"/ [`IntoParallelRefMutIterator`]: https://docs.rs/rayon/1.0/rayon/iter/trait.IntoParallelRefMutIterator.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70957,"byte_end":71067,"line_start":136,"line_end":136,"column_start":1,"column_end":111}}]},{"kind":"Struct","id":{"krate":0,"index":395},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72177,"byte_end":72189,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"ParValuesMut","qualname":"::external_trait_impls::rayon::map::ParValuesMut","value":"ParValuesMut {  }","parent":null,"children":[{"krate":0,"index":400}],"decl_id":null,"docs":" Parallel iterator over mutable references to values in a map.","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable references to values in a map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":71853,"byte_end":71918,"line_start":166,"line_end":166,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":71919,"byte_end":71922,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_values_mut`] method on [`HashMap`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":71923,"byte_end":72000,"line_start":168,"line_end":168,"column_start":1,"column_end":78}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72001,"byte_end":72036,"line_start":169,"line_end":169,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72037,"byte_end":72040,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ [`par_values_mut`]: /hashbrown/struct.HashMap.html#method.par_values_mut","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72041,"byte_end":72117,"line_start":171,"line_end":171,"column_start":1,"column_end":77}},{"value":"/ [`HashMap`]: /hashbrown/struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72118,"byte_end":72165,"line_start":172,"line_end":172,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":415},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73324,"byte_end":73335,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"IntoParIter","qualname":"::external_trait_impls::rayon::map::IntoParIter","value":"IntoParIter {  }","parent":null,"children":[{"krate":0,"index":419}],"decl_id":null,"docs":" Parallel iterator over entries of a consumed map.","sig":null,"attributes":[{"value":"/ Parallel iterator over entries of a consumed map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72863,"byte_end":72916,"line_start":197,"line_end":197,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72917,"byte_end":72920,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`into_par_iter`] method on [`HashMap`]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72921,"byte_end":72996,"line_start":199,"line_end":199,"column_start":1,"column_end":76}},{"value":"/ (provided by the [`IntoParallelIterator`] trait).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72997,"byte_end":73050,"line_start":200,"line_end":200,"column_start":1,"column_end":54}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73051,"byte_end":73086,"line_start":201,"line_end":201,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73087,"byte_end":73090,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ [`into_par_iter`]: /hashbrown/struct.HashMap.html#method.into_par_iter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73091,"byte_end":73165,"line_start":203,"line_end":203,"column_start":1,"column_end":75}},{"value":"/ [`HashMap`]: /hashbrown/struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73166,"byte_end":73213,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/ [`IntoParallelIterator`]: https://docs.rs/rayon/1.0/rayon/iter/trait.IntoParallelIterator.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73214,"byte_end":73312,"line_start":205,"line_end":205,"column_start":1,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74218,"byte_end":74226,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"ParDrain","qualname":"::external_trait_impls::rayon::map::ParDrain","value":"ParDrain {  }","parent":null,"children":[{"krate":0,"index":437}],"decl_id":null,"docs":" Parallel draining iterator over entries of a map.","sig":null,"attributes":[{"value":"/ Parallel draining iterator over entries of a map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73921,"byte_end":73974,"line_start":228,"line_end":228,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73975,"byte_end":73978,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_drain`] method on [`HashMap`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73979,"byte_end":74051,"line_start":230,"line_end":230,"column_start":1,"column_end":73}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74052,"byte_end":74087,"line_start":231,"line_end":231,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74088,"byte_end":74091,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ [`par_drain`]: /hashbrown/struct.HashMap.html#method.par_drain","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74092,"byte_end":74158,"line_start":233,"line_end":233,"column_start":1,"column_end":67}},{"value":"/ [`HashMap`]: /hashbrown/struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74159,"byte_end":74206,"line_start":234,"line_end":234,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75025,"byte_end":75033,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"par_keys","qualname":"<HashMap<K, V, S>>::par_keys","value":"fn (&self) -> ParKeys<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits (potentially in parallel) immutably borrowed keys in an arbitrary order.\n","sig":null,"attributes":[{"value":"/ Visits (potentially in parallel) immutably borrowed keys in an arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74881,"byte_end":74964,"line_start":260,"line_end":260,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75005,"byte_end":75011,"line_start":261,"line_end":261,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75254,"byte_end":75264,"line_start":268,"line_end":268,"column_start":12,"column_end":22},"name":"par_values","qualname":"<HashMap<K, V, S>>::par_values","value":"fn (&self) -> ParValues<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits (potentially in parallel) immutably borrowed values in an arbitrary order.\n","sig":null,"attributes":[{"value":"/ Visits (potentially in parallel) immutably borrowed values in an arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75108,"byte_end":75193,"line_start":266,"line_end":266,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75234,"byte_end":75240,"line_start":267,"line_end":267,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75540,"byte_end":75554,"line_start":276,"line_end":276,"column_start":12,"column_end":26},"name":"par_values_mut","qualname":"<HashMap<K, V, S>>::par_values_mut","value":"fn (&mut self) -> ParValuesMut<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits (potentially in parallel) mutably borrowed values in an arbitrary order.\n","sig":null,"attributes":[{"value":"/ Visits (potentially in parallel) mutably borrowed values in an arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75396,"byte_end":75479,"line_start":274,"line_end":274,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75520,"byte_end":75526,"line_start":275,"line_end":275,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75839,"byte_end":75848,"line_start":283,"line_end":283,"column_start":12,"column_end":21},"name":"par_drain","qualname":"<HashMap<K, V, S>>::par_drain","value":"fn (&mut self) -> ParDrain<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Consumes (potentially in parallel) all values in an arbitrary order,\n while preserving the map's allocated memory for reuse.\n","sig":null,"attributes":[{"value":"/ Consumes (potentially in parallel) all values in an arbitrary order,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75643,"byte_end":75715,"line_start":280,"line_end":280,"column_start":5,"column_end":77}},{"value":"/ while preserving the map's allocated memory for reuse.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75720,"byte_end":75778,"line_start":281,"line_end":281,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75819,"byte_end":75825,"line_start":282,"line_end":282,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":76249,"byte_end":76255,"line_start":298,"line_end":298,"column_start":12,"column_end":18},"name":"par_eq","qualname":"<HashMap<K, V, S>>::par_eq","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map is equal to another,\n i.e. both maps contain the same keys mapped to the same values.","sig":null,"attributes":[{"value":"/ Returns `true` if the map is equal to another,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":76047,"byte_end":76097,"line_start":294,"line_end":294,"column_start":5,"column_end":55}},{"value":"/ i.e. both maps contain the same keys mapped to the same values.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":76102,"byte_end":76169,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":76174,"byte_end":76177,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ This method runs in a potentially parallel fashion.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":76182,"byte_end":76237,"line_start":297,"line_end":297,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":605},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92932,"byte_end":92943,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"name":"IntoParIter","qualname":"::external_trait_impls::rayon::set::IntoParIter","value":"IntoParIter {  }","parent":null,"children":[{"krate":0,"index":608}],"decl_id":null,"docs":" Parallel iterator over elements of a consumed set.","sig":null,"attributes":[{"value":"/ Parallel iterator over elements of a consumed set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92470,"byte_end":92524,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92525,"byte_end":92528,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`into_par_iter`] method on [`HashSet`]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92529,"byte_end":92604,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"/ (provided by the [`IntoParallelIterator`] trait).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92605,"byte_end":92658,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92659,"byte_end":92694,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92695,"byte_end":92698,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`into_par_iter`]: /hashbrown/struct.HashSet.html#method.into_par_iter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92699,"byte_end":92773,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ [`HashSet`]: /hashbrown/struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92774,"byte_end":92821,"line_start":15,"line_end":15,"column_start":1,"column_end":48}},{"value":"/ [`IntoParallelIterator`]: https://docs.rs/rayon/1.0/rayon/iter/trait.IntoParallelIterator.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":92822,"byte_end":92920,"line_start":16,"line_end":16,"column_start":1,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":616},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93616,"byte_end":93624,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"ParDrain","qualname":"::external_trait_impls::rayon::set::ParDrain","value":"ParDrain {  }","parent":null,"children":[{"krate":0,"index":620}],"decl_id":null,"docs":" Parallel draining iterator over entries of a set.","sig":null,"attributes":[{"value":"/ Parallel draining iterator over entries of a set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93319,"byte_end":93372,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93373,"byte_end":93376,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_drain`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93377,"byte_end":93449,"line_start":38,"line_end":38,"column_start":1,"column_end":73}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93450,"byte_end":93485,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93486,"byte_end":93489,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`par_drain`]: /hashbrown/struct.HashSet.html#method.par_drain","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93490,"byte_end":93556,"line_start":41,"line_end":41,"column_start":1,"column_end":67}},{"value":"/ [`HashSet`]: /hashbrown/struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93557,"byte_end":93604,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":628},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94477,"byte_end":94484,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"ParIter","qualname":"::external_trait_impls::rayon::set::ParIter","value":"ParIter {  }","parent":null,"children":[{"krate":0,"index":632}],"decl_id":null,"docs":" Parallel iterator over shared references to elements in a set.","sig":null,"attributes":[{"value":"/ Parallel iterator over shared references to elements in a set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94009,"byte_end":94075,"line_start":62,"line_end":62,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94076,"byte_end":94079,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_iter`] method on [`HashSet`]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94080,"byte_end":94150,"line_start":64,"line_end":64,"column_start":1,"column_end":71}},{"value":"/ (provided by the [`IntoParallelRefIterator`] trait).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94151,"byte_end":94207,"line_start":65,"line_end":65,"column_start":1,"column_end":57}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94208,"byte_end":94243,"line_start":66,"line_end":66,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94244,"byte_end":94247,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`par_iter`]: /hashbrown/struct.HashSet.html#method.par_iter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94248,"byte_end":94312,"line_start":68,"line_end":68,"column_start":1,"column_end":65}},{"value":"/ [`HashSet`]: /hashbrown/struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94313,"byte_end":94360,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/ [`IntoParallelRefIterator`]: https://docs.rs/rayon/1.0/rayon/iter/trait.IntoParallelRefIterator.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94361,"byte_end":94465,"line_start":70,"line_end":70,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":640},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95149,"byte_end":95162,"line_start":94,"line_end":94,"column_start":12,"column_end":25},"name":"ParDifference","qualname":"::external_trait_impls::rayon::set::ParDifference","value":"ParDifference {  }","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645}],"decl_id":null,"docs":" Parallel iterator over shared references to elements in the difference of\n sets.","sig":null,"attributes":[{"value":"/ Parallel iterator over shared references to elements in the difference of","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94803,"byte_end":94880,"line_start":86,"line_end":86,"column_start":1,"column_end":78}},{"value":"/ sets.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94881,"byte_end":94890,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94891,"byte_end":94894,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_difference`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94895,"byte_end":94972,"line_start":89,"line_end":89,"column_start":1,"column_end":78}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94973,"byte_end":95008,"line_start":90,"line_end":90,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95009,"byte_end":95012,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ [`par_difference`]: /hashbrown/struct.HashSet.html#method.par_difference","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95013,"byte_end":95089,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ [`HashSet`]: /hashbrown/struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95090,"byte_end":95137,"line_start":93,"line_end":93,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":654},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96018,"byte_end":96040,"line_start":126,"line_end":126,"column_start":12,"column_end":34},"name":"ParSymmetricDifference","qualname":"::external_trait_impls::rayon::set::ParSymmetricDifference","value":"ParSymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"decl_id":null,"docs":" Parallel iterator over shared references to elements in the symmetric\n difference of sets.","sig":null,"attributes":[{"value":"/ Parallel iterator over shared references to elements in the symmetric","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95628,"byte_end":95701,"line_start":117,"line_end":117,"column_start":1,"column_end":74}},{"value":"/ difference of sets.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95702,"byte_end":95725,"line_start":118,"line_end":118,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95726,"byte_end":95729,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_symmetric_difference`] method on","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95730,"byte_end":95804,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/ [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95805,"byte_end":95821,"line_start":121,"line_end":121,"column_start":1,"column_end":17}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95822,"byte_end":95857,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95858,"byte_end":95861,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [`par_symmetric_difference`]: /hashbrown/struct.HashSet.html#method.par_symmetric_difference","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95862,"byte_end":95958,"line_start":124,"line_end":124,"column_start":1,"column_end":97}},{"value":"/ [`HashSet`]: /hashbrown/struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95959,"byte_end":96006,"line_start":125,"line_end":125,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":667},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96880,"byte_end":96895,"line_start":157,"line_end":157,"column_start":12,"column_end":27},"name":"ParIntersection","qualname":"::external_trait_impls::rayon::set::ParIntersection","value":"ParIntersection {  }","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672}],"decl_id":null,"docs":" Parallel iterator over shared references to elements in the intersection of\n sets.","sig":null,"attributes":[{"value":"/ Parallel iterator over shared references to elements in the intersection of","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96526,"byte_end":96605,"line_start":149,"line_end":149,"column_start":1,"column_end":80}},{"value":"/ sets.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96606,"byte_end":96615,"line_start":150,"line_end":150,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96616,"byte_end":96619,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_intersection`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96620,"byte_end":96699,"line_start":152,"line_end":152,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96700,"byte_end":96735,"line_start":153,"line_end":153,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96736,"byte_end":96739,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ [`par_intersection`]: /hashbrown/struct.HashSet.html#method.par_intersection","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96740,"byte_end":96820,"line_start":155,"line_end":155,"column_start":1,"column_end":81}},{"value":"/ [`HashSet`]: /hashbrown/struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96821,"byte_end":96868,"line_start":156,"line_end":156,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":681},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97684,"byte_end":97692,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"ParUnion","qualname":"::external_trait_impls::rayon::set::ParUnion","value":"ParUnion {  }","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"decl_id":null,"docs":" Parallel iterator over shared references to elements in the union of sets.","sig":null,"attributes":[{"value":"/ Parallel iterator over shared references to elements in the union of sets.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97362,"byte_end":97440,"line_start":180,"line_end":180,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97441,"byte_end":97444,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the [`par_union`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97445,"byte_end":97517,"line_start":182,"line_end":182,"column_start":1,"column_end":73}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97518,"byte_end":97553,"line_start":183,"line_end":183,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97554,"byte_end":97557,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ [`par_union`]: /hashbrown/struct.HashSet.html#method.par_union","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97558,"byte_end":97624,"line_start":185,"line_end":185,"column_start":1,"column_end":67}},{"value":"/ [`HashSet`]: /hashbrown/struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97625,"byte_end":97672,"line_start":186,"line_end":186,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98446,"byte_end":98460,"line_start":218,"line_end":218,"column_start":12,"column_end":26},"name":"par_difference","qualname":"<HashSet<T, S>>::par_difference","value":"fn <'a> (&'a self, other: &'a Self) -> ParDifference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits (potentially in parallel) the values representing the difference,\n i.e. the values that are in `self` but not in `other`.\n","sig":null,"attributes":[{"value":"/ Visits (potentially in parallel) the values representing the difference,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98246,"byte_end":98322,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ i.e. the values that are in `self` but not in `other`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98327,"byte_end":98385,"line_start":216,"line_end":216,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98426,"byte_end":98432,"line_start":217,"line_end":217,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98797,"byte_end":98821,"line_start":225,"line_end":225,"column_start":12,"column_end":36},"name":"par_symmetric_difference","qualname":"<HashSet<T, S>>::par_symmetric_difference","value":"fn <'a> (&'a self, other: &'a Self) -> ParSymmetricDifference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits (potentially in parallel) the values representing the symmetric\n difference, i.e. the values that are in `self` or in `other` but not in both.\n","sig":null,"attributes":[{"value":"/ Visits (potentially in parallel) the values representing the symmetric","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98576,"byte_end":98650,"line_start":222,"line_end":222,"column_start":5,"column_end":79}},{"value":"/ difference, i.e. the values that are in `self` or in `other` but not in both.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98655,"byte_end":98736,"line_start":223,"line_end":223,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98777,"byte_end":98783,"line_start":224,"line_end":224,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99178,"byte_end":99194,"line_start":235,"line_end":235,"column_start":12,"column_end":28},"name":"par_intersection","qualname":"<HashSet<T, S>>::par_intersection","value":"fn <'a> (&'a self, other: &'a Self) -> ParIntersection<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits (potentially in parallel) the values representing the\n intersection, i.e. the values that are both in `self` and `other`.\n","sig":null,"attributes":[{"value":"/ Visits (potentially in parallel) the values representing the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98978,"byte_end":99042,"line_start":232,"line_end":232,"column_start":5,"column_end":69}},{"value":"/ intersection, i.e. the values that are both in `self` and `other`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99047,"byte_end":99117,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99158,"byte_end":99164,"line_start":234,"line_end":234,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99516,"byte_end":99525,"line_start":242,"line_end":242,"column_start":12,"column_end":21},"name":"par_union","qualname":"<HashSet<T, S>>::par_union","value":"fn <'a> (&'a self, other: &'a Self) -> ParUnion<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits (potentially in parallel) the values representing the union,\n i.e. all the values in `self` or `other`, without duplicates.\n","sig":null,"attributes":[{"value":"/ Visits (potentially in parallel) the values representing the union,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99314,"byte_end":99385,"line_start":239,"line_end":239,"column_start":5,"column_end":76}},{"value":"/ i.e. all the values in `self` or `other`, without duplicates.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99390,"byte_end":99455,"line_start":240,"line_end":240,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99496,"byte_end":99502,"line_start":241,"line_end":241,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99845,"byte_end":99860,"line_start":250,"line_end":250,"column_start":12,"column_end":27},"name":"par_is_disjoint","qualname":"<HashSet<T, S>>::par_is_disjoint","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99631,"byte_end":99699,"line_start":246,"line_end":246,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99704,"byte_end":99765,"line_start":247,"line_end":247,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99770,"byte_end":99773,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This method runs in a potentially parallel fashion.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99778,"byte_end":99833,"line_start":249,"line_end":249,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100158,"byte_end":100171,"line_start":258,"line_end":258,"column_start":12,"column_end":25},"name":"par_is_subset","qualname":"<HashSet<T, S>>::par_is_subset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e. `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":99960,"byte_end":100013,"line_start":254,"line_end":254,"column_start":5,"column_end":58}},{"value":"/ i.e. `other` contains at least all the values in `self`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100018,"byte_end":100078,"line_start":255,"line_end":255,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100083,"byte_end":100086,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ This method runs in a potentially parallel fashion.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100091,"byte_end":100146,"line_start":257,"line_end":257,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100558,"byte_end":100573,"line_start":270,"line_end":270,"column_start":12,"column_end":27},"name":"par_is_superset","qualname":"<HashSet<T, S>>::par_is_superset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e. `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100358,"byte_end":100413,"line_start":266,"line_end":266,"column_start":5,"column_end":60}},{"value":"/ i.e. `self` contains at least all the values in `other`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100418,"byte_end":100478,"line_start":267,"line_end":267,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100483,"byte_end":100486,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This method runs in a potentially parallel fashion.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100491,"byte_end":100546,"line_start":269,"line_end":269,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100828,"byte_end":100834,"line_start":278,"line_end":278,"column_start":12,"column_end":18},"name":"par_eq","qualname":"<HashSet<T, S>>::par_eq","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is equal to another,\n i.e. both sets contain the same values.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is equal to another,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100650,"byte_end":100700,"line_start":274,"line_end":274,"column_start":5,"column_end":55}},{"value":"/ i.e. both sets contain the same values.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100705,"byte_end":100748,"line_start":275,"line_end":275,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100753,"byte_end":100756,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This method runs in a potentially parallel fashion.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100761,"byte_end":100816,"line_start":277,"line_end":277,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":101223,"byte_end":101232,"line_start":291,"line_end":291,"column_start":12,"column_end":21},"name":"par_drain","qualname":"<HashSet<T, S>>::par_drain","value":"fn (&mut self) -> ParDrain<'_, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Consumes (potentially in parallel) all values in an arbitrary order,\n while preserving the set's allocated memory for reuse.\n","sig":null,"attributes":[{"value":"/ Consumes (potentially in parallel) all values in an arbitrary order,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":101027,"byte_end":101099,"line_start":288,"line_end":288,"column_start":5,"column_end":77}},{"value":"/ while preserving the set's allocated memory for reuse.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":101104,"byte_end":101162,"line_start":289,"line_end":289,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":101203,"byte_end":101209,"line_start":290,"line_end":290,"column_start":41,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":770},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110491,"byte_end":110509,"line_start":13,"line_end":13,"column_start":10,"column_end":28},"name":"DefaultHashBuilder","qualname":"::map::DefaultHashBuilder","value":"ahash::RandomState","parent":null,"children":[],"decl_id":null,"docs":" Default hasher for `HashMap`.\n","sig":null,"attributes":[{"value":"/ Default hasher for `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110422,"byte_end":110455,"line_start":11,"line_end":11,"column_start":1,"column_end":34}},{"value":"cfg(feature = \"ahash\")","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110456,"byte_end":110481,"line_start":12,"line_end":12,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":771},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116902,"byte_end":116909,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110636,"byte_end":110702,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110703,"byte_end":110706,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently [`AHash`], though this is","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110707,"byte_end":110779,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110780,"byte_end":110856,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110857,"byte_end":110936,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110937,"byte_end":110973,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110974,"byte_end":110977,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":110978,"byte_end":111054,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111055,"byte_end":111135,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111136,"byte_end":111217,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111218,"byte_end":111221,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111222,"byte_end":111305,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111306,"byte_end":111384,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111385,"byte_end":111456,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111457,"byte_end":111476,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111477,"byte_end":111480,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111481,"byte_end":111492,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111493,"byte_end":111529,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111530,"byte_end":111537,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111538,"byte_end":111541,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111542,"byte_end":111612,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111613,"byte_end":111616,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111617,"byte_end":111694,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111695,"byte_end":111775,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111776,"byte_end":111851,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111852,"byte_end":111930,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111931,"byte_end":111934,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":111935,"byte_end":112014,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112015,"byte_end":112093,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112094,"byte_end":112174,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112175,"byte_end":112220,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112221,"byte_end":112224,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112225,"byte_end":112239,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112240,"byte_end":112243,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112244,"byte_end":112251,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112252,"byte_end":112279,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112280,"byte_end":112283,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112284,"byte_end":112352,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112353,"byte_end":112412,"line_start":57,"line_end":57,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112413,"byte_end":112455,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112456,"byte_end":112459,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112460,"byte_end":112485,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112486,"byte_end":112510,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112511,"byte_end":112564,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112565,"byte_end":112605,"line_start":63,"line_end":63,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112606,"byte_end":112612,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112613,"byte_end":112637,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112638,"byte_end":112680,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112681,"byte_end":112716,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112717,"byte_end":112723,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112724,"byte_end":112748,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112749,"byte_end":112791,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112792,"byte_end":112830,"line_start":71,"line_end":71,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112831,"byte_end":112837,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112838,"byte_end":112862,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112863,"byte_end":112919,"line_start":74,"line_end":74,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112920,"byte_end":112961,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112962,"byte_end":112968,"line_start":76,"line_end":76,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112969,"byte_end":112972,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":112973,"byte_end":113005,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113006,"byte_end":113076,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113077,"byte_end":113116,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113117,"byte_end":113171,"line_start":81,"line_end":81,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113172,"byte_end":113244,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113245,"byte_end":113282,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113283,"byte_end":113288,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113289,"byte_end":113292,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113293,"byte_end":113366,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113367,"byte_end":113428,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113429,"byte_end":113432,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113433,"byte_end":113485,"line_start":89,"line_end":89,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113486,"byte_end":113563,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113564,"byte_end":113591,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113592,"byte_end":113630,"line_start":92,"line_end":92,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113631,"byte_end":113692,"line_start":93,"line_end":93,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113693,"byte_end":113748,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113749,"byte_end":113758,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113759,"byte_end":113764,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113765,"byte_end":113768,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113769,"byte_end":113841,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113842,"byte_end":113915,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113916,"byte_end":113919,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113920,"byte_end":113951,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113952,"byte_end":113993,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":113994,"byte_end":114039,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114040,"byte_end":114045,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114046,"byte_end":114053,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114054,"byte_end":114057,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114058,"byte_end":114133,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114134,"byte_end":114214,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114215,"byte_end":114232,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114233,"byte_end":114236,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114237,"byte_end":114244,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114245,"byte_end":114272,"line_start":112,"line_end":112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114273,"byte_end":114276,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114277,"byte_end":114345,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114346,"byte_end":114399,"line_start":115,"line_end":115,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114400,"byte_end":114442,"line_start":116,"line_end":116,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114443,"byte_end":114446,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114447,"byte_end":114480,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114481,"byte_end":114556,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114557,"byte_end":114592,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114593,"byte_end":114603,"line_start":121,"line_end":121,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114604,"byte_end":114609,"line_start":122,"line_end":122,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114610,"byte_end":114613,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114614,"byte_end":114666,"line_start":124,"line_end":124,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114667,"byte_end":114715,"line_start":125,"line_end":125,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114716,"byte_end":114719,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114720,"byte_end":114793,"line_start":127,"line_end":127,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114794,"byte_end":114822,"line_start":128,"line_end":128,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114823,"byte_end":114890,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114891,"byte_end":114894,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114895,"byte_end":114963,"line_start":131,"line_end":131,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":114964,"byte_end":115023,"line_start":132,"line_end":132,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115024,"byte_end":115056,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115057,"byte_end":115064,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115065,"byte_end":115068,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115069,"byte_end":115162,"line_start":136,"line_end":136,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115163,"byte_end":115201,"line_start":137,"line_end":137,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115202,"byte_end":115205,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115206,"byte_end":115265,"line_start":139,"line_end":139,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115266,"byte_end":115330,"line_start":140,"line_end":140,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115331,"byte_end":115404,"line_start":141,"line_end":141,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115405,"byte_end":115476,"line_start":142,"line_end":142,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115477,"byte_end":115542,"line_start":143,"line_end":143,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115543,"byte_end":115575,"line_start":144,"line_end":144,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115576,"byte_end":115616,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115617,"byte_end":115683,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115684,"byte_end":115725,"line_start":147,"line_end":147,"column_start":1,"column_end":42}},{"value":"/ [`AHash`]: https://crates.io/crates/ahash","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115726,"byte_end":115771,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115772,"byte_end":115775,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115776,"byte_end":115783,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115784,"byte_end":115811,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115812,"byte_end":115815,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115816,"byte_end":115857,"line_start":153,"line_end":153,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115858,"byte_end":115877,"line_start":154,"line_end":154,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115878,"byte_end":115899,"line_start":155,"line_end":155,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115900,"byte_end":115924,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115925,"byte_end":115930,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115931,"byte_end":115934,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115935,"byte_end":115952,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115953,"byte_end":115986,"line_start":160,"line_end":160,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":115987,"byte_end":116040,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116041,"byte_end":116116,"line_start":162,"line_end":162,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116117,"byte_end":116126,"line_start":163,"line_end":163,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116127,"byte_end":116132,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116133,"byte_end":116136,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116137,"byte_end":116194,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116195,"byte_end":116232,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116233,"byte_end":116236,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116237,"byte_end":116292,"line_start":169,"line_end":169,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116293,"byte_end":116348,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116349,"byte_end":116406,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116407,"byte_end":116410,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116411,"byte_end":116480,"line_start":173,"line_end":173,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116481,"byte_end":116519,"line_start":174,"line_end":174,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116520,"byte_end":116571,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116572,"byte_end":116577,"line_start":176,"line_end":176,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116578,"byte_end":116585,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116586,"byte_end":116589,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116590,"byte_end":116667,"line_start":179,"line_end":179,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116668,"byte_end":116671,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116672,"byte_end":116679,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116680,"byte_end":116707,"line_start":182,"line_end":182,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116708,"byte_end":116711,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116712,"byte_end":116810,"line_start":184,"line_end":184,"column_start":1,"column_end":99}},{"value":"/     .iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116811,"byte_end":116846,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"/ // use the values stored in map","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116847,"byte_end":116882,"line_start":186,"line_end":186,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":116883,"byte_end":116890,"line_start":187,"line_end":187,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118166,"byte_end":118169,"line_start":230,"line_end":230,"column_start":12,"column_end":15},"name":"new","qualname":"<HashMap<K, V, DefaultHashBuilder>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117788,"byte_end":117819,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117824,"byte_end":117827,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The hash map is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117832,"byte_end":117924,"line_start":220,"line_end":220,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117929,"byte_end":117956,"line_start":221,"line_end":221,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117961,"byte_end":117964,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117969,"byte_end":117983,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117988,"byte_end":117991,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117996,"byte_end":118003,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118008,"byte_end":118035,"line_start":226,"line_end":226,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118040,"byte_end":118093,"line_start":227,"line_end":227,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118098,"byte_end":118105,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118146,"byte_end":118152,"line_start":229,"line_end":229,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118659,"byte_end":118672,"line_start":246,"line_end":246,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashMap<K, V, DefaultHashBuilder>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118217,"byte_end":118276,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118281,"byte_end":118284,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118289,"byte_end":118363,"line_start":236,"line_end":236,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118368,"byte_end":118437,"line_start":237,"line_end":237,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118442,"byte_end":118445,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118450,"byte_end":118464,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118469,"byte_end":118472,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118477,"byte_end":118484,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118489,"byte_end":118516,"line_start":242,"line_end":242,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118521,"byte_end":118586,"line_start":243,"line_end":243,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118591,"byte_end":118598,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118639,"byte_end":118645,"line_start":245,"line_end":245,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119827,"byte_end":119838,"line_start":278,"line_end":278,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"fn (hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118826,"byte_end":118902,"line_start":252,"line_end":252,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118907,"byte_end":118916,"line_start":253,"line_end":253,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118921,"byte_end":118924,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118929,"byte_end":118982,"line_start":255,"line_end":255,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118987,"byte_end":118990,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118995,"byte_end":119058,"line_start":257,"line_end":257,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119063,"byte_end":119128,"line_start":258,"line_end":258,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119133,"byte_end":119196,"line_start":259,"line_end":259,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119201,"byte_end":119265,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119270,"byte_end":119273,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119278,"byte_end":119354,"line_start":262,"line_end":262,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119359,"byte_end":119423,"line_start":263,"line_end":263,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119428,"byte_end":119431,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119436,"byte_end":119450,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119455,"byte_end":119458,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119463,"byte_end":119470,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119475,"byte_end":119502,"line_start":268,"line_end":268,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119507,"byte_end":119555,"line_start":269,"line_end":269,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119560,"byte_end":119563,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119568,"byte_end":119610,"line_start":271,"line_end":271,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119615,"byte_end":119657,"line_start":272,"line_end":272,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119662,"byte_end":119683,"line_start":273,"line_end":273,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119688,"byte_end":119695,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119700,"byte_end":119703,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119708,"byte_end":119766,"line_start":276,"line_end":276,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119807,"byte_end":119813,"line_start":277,"line_end":277,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121093,"byte_end":121117,"line_start":312,"line_end":312,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"fn (capacity: usize, hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":119964,"byte_end":120044,"line_start":285,"line_end":285,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120049,"byte_end":120070,"line_start":286,"line_end":286,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120075,"byte_end":120078,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120083,"byte_end":120157,"line_start":288,"line_end":288,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120162,"byte_end":120231,"line_start":289,"line_end":289,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120236,"byte_end":120239,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120244,"byte_end":120307,"line_start":291,"line_end":291,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120312,"byte_end":120377,"line_start":292,"line_end":292,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120382,"byte_end":120445,"line_start":293,"line_end":293,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120450,"byte_end":120514,"line_start":294,"line_end":294,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120519,"byte_end":120522,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120527,"byte_end":120603,"line_start":296,"line_end":296,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120608,"byte_end":120672,"line_start":297,"line_end":297,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120677,"byte_end":120680,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120685,"byte_end":120699,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120704,"byte_end":120707,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120712,"byte_end":120719,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120724,"byte_end":120751,"line_start":302,"line_end":302,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120756,"byte_end":120804,"line_start":303,"line_end":303,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120809,"byte_end":120812,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120817,"byte_end":120859,"line_start":305,"line_end":305,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120864,"byte_end":120923,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120928,"byte_end":120949,"line_start":307,"line_end":307,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120954,"byte_end":120961,"line_start":308,"line_end":308,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120966,"byte_end":120969,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":120974,"byte_end":121032,"line_start":310,"line_end":310,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121073,"byte_end":121079,"line_start":311,"line_end":311,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121810,"byte_end":121816,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121278,"byte_end":121331,"line_start":319,"line_end":319,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121336,"byte_end":121339,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121344,"byte_end":121422,"line_start":321,"line_end":321,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121427,"byte_end":121430,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121435,"byte_end":121449,"line_start":323,"line_end":323,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121454,"byte_end":121457,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121462,"byte_end":121469,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121474,"byte_end":121501,"line_start":326,"line_end":326,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121506,"byte_end":121554,"line_start":327,"line_end":327,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121559,"byte_end":121562,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121567,"byte_end":121614,"line_start":329,"line_end":329,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121619,"byte_end":121681,"line_start":330,"line_end":330,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121686,"byte_end":121737,"line_start":331,"line_end":331,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121742,"byte_end":121749,"line_start":332,"line_end":332,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121790,"byte_end":121796,"line_start":333,"line_end":333,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122360,"byte_end":122368,"line_start":351,"line_end":351,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121870,"byte_end":121943,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121948,"byte_end":121951,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":121956,"byte_end":122031,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122036,"byte_end":122102,"line_start":341,"line_end":341,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122107,"byte_end":122110,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122115,"byte_end":122129,"line_start":343,"line_end":343,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122134,"byte_end":122137,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122142,"byte_end":122149,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122154,"byte_end":122181,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122186,"byte_end":122247,"line_start":347,"line_end":347,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122252,"byte_end":122287,"line_start":348,"line_end":348,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122292,"byte_end":122299,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122340,"byte_end":122346,"line_start":350,"line_end":350,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122892,"byte_end":122896,"line_start":373,"line_end":373,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S>>::keys","value":"fn (&self) -> Keys<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122428,"byte_end":122481,"line_start":355,"line_end":355,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122486,"byte_end":122527,"line_start":356,"line_end":356,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122532,"byte_end":122535,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122540,"byte_end":122554,"line_start":358,"line_end":358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122559,"byte_end":122562,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122567,"byte_end":122574,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122579,"byte_end":122606,"line_start":361,"line_end":361,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122611,"byte_end":122614,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122619,"byte_end":122652,"line_start":363,"line_end":363,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122657,"byte_end":122680,"line_start":364,"line_end":364,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122685,"byte_end":122708,"line_start":365,"line_end":365,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122713,"byte_end":122736,"line_start":366,"line_end":366,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122741,"byte_end":122744,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122749,"byte_end":122776,"line_start":368,"line_end":368,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122781,"byte_end":122809,"line_start":369,"line_end":369,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122814,"byte_end":122819,"line_start":370,"line_end":370,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122824,"byte_end":122831,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122872,"byte_end":122878,"line_start":372,"line_end":372,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123439,"byte_end":123445,"line_start":395,"line_end":395,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S>>::values","value":"fn (&self) -> Values<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":122971,"byte_end":123026,"line_start":377,"line_end":377,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123031,"byte_end":123072,"line_start":378,"line_end":378,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123077,"byte_end":123080,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123085,"byte_end":123099,"line_start":380,"line_end":380,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123104,"byte_end":123107,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123112,"byte_end":123119,"line_start":382,"line_end":382,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123124,"byte_end":123151,"line_start":383,"line_end":383,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123156,"byte_end":123159,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123164,"byte_end":123197,"line_start":385,"line_end":385,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123202,"byte_end":123225,"line_start":386,"line_end":386,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123230,"byte_end":123253,"line_start":387,"line_end":387,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123258,"byte_end":123281,"line_start":388,"line_end":388,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123286,"byte_end":123289,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123294,"byte_end":123323,"line_start":390,"line_end":390,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123328,"byte_end":123356,"line_start":391,"line_end":391,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123361,"byte_end":123366,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123371,"byte_end":123378,"line_start":393,"line_end":393,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123419,"byte_end":123425,"line_start":394,"line_end":394,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124098,"byte_end":124108,"line_start":422,"line_end":422,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S>>::values_mut","value":"fn (&mut self) -> ValuesMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123524,"byte_end":123587,"line_start":399,"line_end":399,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123592,"byte_end":123637,"line_start":400,"line_end":400,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123642,"byte_end":123645,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123650,"byte_end":123664,"line_start":402,"line_end":402,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123669,"byte_end":123672,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123677,"byte_end":123684,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123689,"byte_end":123716,"line_start":405,"line_end":405,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123721,"byte_end":123724,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123729,"byte_end":123762,"line_start":407,"line_end":407,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123767,"byte_end":123770,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123775,"byte_end":123798,"line_start":409,"line_end":409,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123803,"byte_end":123826,"line_start":410,"line_end":410,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123831,"byte_end":123854,"line_start":411,"line_end":411,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123859,"byte_end":123862,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123867,"byte_end":123900,"line_start":413,"line_end":413,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123905,"byte_end":123930,"line_start":414,"line_end":414,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123935,"byte_end":123940,"line_start":415,"line_end":415,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123945,"byte_end":123948,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123953,"byte_end":123982,"line_start":417,"line_end":417,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":123987,"byte_end":124015,"line_start":418,"line_end":418,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124020,"byte_end":124025,"line_start":419,"line_end":419,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124030,"byte_end":124037,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124078,"byte_end":124084,"line_start":421,"line_end":421,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124731,"byte_end":124735,"line_start":446,"line_end":446,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S>>::iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124222,"byte_end":124286,"line_start":428,"line_end":428,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124291,"byte_end":124341,"line_start":429,"line_end":429,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124346,"byte_end":124349,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124354,"byte_end":124368,"line_start":431,"line_end":431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124373,"byte_end":124376,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124381,"byte_end":124388,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124393,"byte_end":124420,"line_start":434,"line_end":434,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124425,"byte_end":124428,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124433,"byte_end":124466,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124471,"byte_end":124494,"line_start":437,"line_end":437,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124499,"byte_end":124522,"line_start":438,"line_end":438,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124527,"byte_end":124550,"line_start":439,"line_end":439,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124555,"byte_end":124558,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124563,"byte_end":124597,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124602,"byte_end":124648,"line_start":442,"line_end":442,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124653,"byte_end":124658,"line_start":443,"line_end":443,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124663,"byte_end":124670,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124711,"byte_end":124717,"line_start":445,"line_end":445,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125635,"byte_end":125643,"line_start":480,"line_end":480,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":124970,"byte_end":125034,"line_start":456,"line_end":456,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125039,"byte_end":125081,"line_start":457,"line_end":457,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125086,"byte_end":125140,"line_start":458,"line_end":458,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125145,"byte_end":125148,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125153,"byte_end":125167,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125172,"byte_end":125175,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125180,"byte_end":125187,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125192,"byte_end":125219,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125224,"byte_end":125227,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125232,"byte_end":125265,"line_start":465,"line_end":465,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125270,"byte_end":125293,"line_start":466,"line_end":466,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125298,"byte_end":125321,"line_start":467,"line_end":467,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125326,"byte_end":125349,"line_start":468,"line_end":468,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125354,"byte_end":125357,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125362,"byte_end":125386,"line_start":470,"line_end":470,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125391,"byte_end":125427,"line_start":471,"line_end":471,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125432,"byte_end":125450,"line_start":472,"line_end":472,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125455,"byte_end":125460,"line_start":473,"line_end":473,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125465,"byte_end":125468,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125473,"byte_end":125501,"line_start":475,"line_end":475,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125506,"byte_end":125552,"line_start":476,"line_end":476,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125557,"byte_end":125562,"line_start":477,"line_end":477,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125567,"byte_end":125574,"line_start":478,"line_end":478,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":125615,"byte_end":125621,"line_start":479,"line_end":479,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126360,"byte_end":126363,"line_start":509,"line_end":509,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126028,"byte_end":126074,"line_start":496,"line_end":496,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126079,"byte_end":126082,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126087,"byte_end":126101,"line_start":498,"line_end":498,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126106,"byte_end":126109,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126114,"byte_end":126121,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126126,"byte_end":126153,"line_start":501,"line_end":501,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126158,"byte_end":126161,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126166,"byte_end":126197,"line_start":503,"line_end":503,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126202,"byte_end":126229,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126234,"byte_end":126255,"line_start":505,"line_end":505,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126260,"byte_end":126287,"line_start":506,"line_end":506,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126292,"byte_end":126299,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126340,"byte_end":126346,"line_start":508,"line_end":508,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126754,"byte_end":126762,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126418,"byte_end":126469,"line_start":513,"line_end":513,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126474,"byte_end":126477,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126482,"byte_end":126496,"line_start":515,"line_end":515,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126501,"byte_end":126504,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126509,"byte_end":126516,"line_start":517,"line_end":517,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126521,"byte_end":126548,"line_start":518,"line_end":518,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126553,"byte_end":126556,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126561,"byte_end":126592,"line_start":520,"line_end":520,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126597,"byte_end":126623,"line_start":521,"line_end":521,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126628,"byte_end":126649,"line_start":522,"line_end":522,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126654,"byte_end":126681,"line_start":523,"line_end":523,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126686,"byte_end":126693,"line_start":524,"line_end":524,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126734,"byte_end":126740,"line_start":525,"line_end":525,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127355,"byte_end":127360,"line_start":550,"line_end":550,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S>>::drain","value":"fn (&mut self) -> Drain<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126815,"byte_end":126890,"line_start":530,"line_end":530,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126895,"byte_end":126926,"line_start":531,"line_end":531,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126931,"byte_end":126934,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126939,"byte_end":126953,"line_start":533,"line_end":533,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126958,"byte_end":126961,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126966,"byte_end":126973,"line_start":535,"line_end":535,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":126978,"byte_end":127005,"line_start":536,"line_end":536,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127010,"byte_end":127013,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127018,"byte_end":127049,"line_start":538,"line_end":538,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127054,"byte_end":127075,"line_start":539,"line_end":539,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127080,"byte_end":127101,"line_start":540,"line_end":540,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127106,"byte_end":127109,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127114,"byte_end":127151,"line_start":542,"line_end":542,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127156,"byte_end":127190,"line_start":543,"line_end":543,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127195,"byte_end":127233,"line_start":544,"line_end":544,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127238,"byte_end":127243,"line_start":545,"line_end":545,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127248,"byte_end":127251,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127256,"byte_end":127282,"line_start":547,"line_end":547,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127287,"byte_end":127294,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127335,"byte_end":127341,"line_start":549,"line_end":549,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127984,"byte_end":127990,"line_start":572,"line_end":572,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127565,"byte_end":127622,"line_start":559,"line_end":559,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127627,"byte_end":127630,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127635,"byte_end":127722,"line_start":561,"line_end":561,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127727,"byte_end":127730,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127735,"byte_end":127749,"line_start":563,"line_end":563,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127754,"byte_end":127757,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127762,"byte_end":127769,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127774,"byte_end":127801,"line_start":566,"line_end":566,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127806,"byte_end":127809,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127814,"byte_end":127886,"line_start":568,"line_end":568,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127891,"byte_end":127926,"line_start":569,"line_end":569,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127931,"byte_end":127960,"line_start":570,"line_end":570,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":127965,"byte_end":127972,"line_start":571,"line_end":571,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129249,"byte_end":129261,"line_start":608,"line_end":608,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashMap<K, V, S>>::drain_filter","value":"fn <F> (&mut self, f: F) -> DrainFilter<'_, K, V, F>","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are false under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are false under the given predicate,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128535,"byte_end":128597,"line_start":589,"line_end":589,"column_start":5,"column_end":67}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128602,"byte_end":128653,"line_start":590,"line_end":590,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128658,"byte_end":128661,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ In other words, move all pairs `(k, v)` such that `f(&k,&mut v)` returns `false` out","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128666,"byte_end":128754,"line_start":592,"line_end":592,"column_start":5,"column_end":93}},{"value":"/ into another iterator.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128759,"byte_end":128785,"line_start":593,"line_end":593,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128790,"byte_end":128793,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, the elements that don't satisfy","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128798,"byte_end":128877,"line_start":595,"line_end":595,"column_start":5,"column_end":84}},{"value":"/ the predicate are dropped from the table.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128882,"byte_end":128927,"line_start":596,"line_end":596,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128932,"byte_end":128935,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128940,"byte_end":128954,"line_start":598,"line_end":598,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128959,"byte_end":128962,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128967,"byte_end":128974,"line_start":600,"line_end":600,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":128979,"byte_end":129006,"line_start":601,"line_end":601,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129011,"byte_end":129014,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129019,"byte_end":129091,"line_start":603,"line_end":603,"column_start":5,"column_end":77}},{"value":"/ let drained = map.drain_filter(|&k, _| k % 2 == 0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129096,"byte_end":129151,"line_start":604,"line_end":604,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(drained.count(), 4);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129156,"byte_end":129191,"line_start":605,"line_end":605,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129196,"byte_end":129225,"line_start":606,"line_end":606,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129230,"byte_end":129237,"line_start":607,"line_end":607,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129873,"byte_end":129878,"line_start":633,"line_end":633,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129506,"byte_end":129582,"line_start":619,"line_end":619,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129587,"byte_end":129601,"line_start":620,"line_end":620,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129606,"byte_end":129609,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129614,"byte_end":129628,"line_start":622,"line_end":622,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129633,"byte_end":129636,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129641,"byte_end":129648,"line_start":624,"line_end":624,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129653,"byte_end":129680,"line_start":625,"line_end":625,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129685,"byte_end":129688,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129693,"byte_end":129724,"line_start":627,"line_end":627,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129729,"byte_end":129750,"line_start":628,"line_end":628,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129755,"byte_end":129769,"line_start":629,"line_end":629,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129774,"byte_end":129800,"line_start":630,"line_end":630,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129805,"byte_end":129812,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129853,"byte_end":129859,"line_start":632,"line_end":632,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130600,"byte_end":130607,"line_start":661,"line_end":661,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130010,"byte_end":130086,"line_start":643,"line_end":643,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130091,"byte_end":130159,"line_start":644,"line_end":644,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130164,"byte_end":130191,"line_start":645,"line_end":645,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130196,"byte_end":130199,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130204,"byte_end":130216,"line_start":647,"line_end":647,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130221,"byte_end":130224,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130229,"byte_end":130287,"line_start":649,"line_end":649,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130292,"byte_end":130295,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130300,"byte_end":130365,"line_start":651,"line_end":651,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130370,"byte_end":130373,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130378,"byte_end":130392,"line_start":653,"line_end":653,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130397,"byte_end":130400,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130405,"byte_end":130412,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130417,"byte_end":130444,"line_start":656,"line_end":656,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130449,"byte_end":130502,"line_start":657,"line_end":657,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130507,"byte_end":130527,"line_start":658,"line_end":658,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130532,"byte_end":130539,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130580,"byte_end":130586,"line_start":660,"line_end":660,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131420,"byte_end":131431,"line_start":684,"line_end":684,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130786,"byte_end":130870,"line_start":667,"line_end":667,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130875,"byte_end":130954,"line_start":668,"line_end":668,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130959,"byte_end":130986,"line_start":669,"line_end":669,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130991,"byte_end":130994,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":130999,"byte_end":131011,"line_start":671,"line_end":671,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131016,"byte_end":131019,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131024,"byte_end":131104,"line_start":673,"line_end":673,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131109,"byte_end":131125,"line_start":674,"line_end":674,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131130,"byte_end":131133,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131138,"byte_end":131152,"line_start":676,"line_end":676,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131157,"byte_end":131160,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131165,"byte_end":131172,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131177,"byte_end":131204,"line_start":679,"line_end":679,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131209,"byte_end":131264,"line_start":680,"line_end":680,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131269,"byte_end":131347,"line_start":681,"line_end":681,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131352,"byte_end":131359,"line_start":682,"line_end":682,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131400,"byte_end":131406,"line_start":683,"line_end":683,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132250,"byte_end":132263,"line_start":707,"line_end":707,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131644,"byte_end":131713,"line_start":690,"line_end":690,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131718,"byte_end":131783,"line_start":691,"line_end":691,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131788,"byte_end":131861,"line_start":692,"line_end":692,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131866,"byte_end":131869,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131874,"byte_end":131888,"line_start":694,"line_end":694,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131893,"byte_end":131896,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131901,"byte_end":131908,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131913,"byte_end":131940,"line_start":697,"line_end":697,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131945,"byte_end":131948,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":131953,"byte_end":132018,"line_start":699,"line_end":699,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132023,"byte_end":132044,"line_start":700,"line_end":700,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132049,"byte_end":132070,"line_start":701,"line_end":701,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132075,"byte_end":132110,"line_start":702,"line_end":702,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132115,"byte_end":132139,"line_start":703,"line_end":703,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132144,"byte_end":132177,"line_start":704,"line_end":704,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132182,"byte_end":132189,"line_start":705,"line_end":705,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132230,"byte_end":132236,"line_start":706,"line_end":706,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133271,"byte_end":133280,"line_start":736,"line_end":736,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132403,"byte_end":132471,"line_start":712,"line_end":712,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132476,"byte_end":132554,"line_start":713,"line_end":713,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132559,"byte_end":132632,"line_start":714,"line_end":714,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132637,"byte_end":132640,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ This function does nothing if the current capacity is smaller than the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132645,"byte_end":132719,"line_start":716,"line_end":716,"column_start":5,"column_end":79}},{"value":"/ supplied minimum capacity.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132724,"byte_end":132754,"line_start":717,"line_end":717,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132759,"byte_end":132762,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132767,"byte_end":132781,"line_start":719,"line_end":719,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132786,"byte_end":132789,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132794,"byte_end":132801,"line_start":721,"line_end":721,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132806,"byte_end":132833,"line_start":722,"line_end":722,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132838,"byte_end":132841,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132846,"byte_end":132911,"line_start":724,"line_end":724,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132916,"byte_end":132937,"line_start":725,"line_end":725,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132942,"byte_end":132963,"line_start":726,"line_end":726,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":132968,"byte_end":133003,"line_start":727,"line_end":727,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133008,"byte_end":133030,"line_start":728,"line_end":728,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133035,"byte_end":133069,"line_start":729,"line_end":729,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133074,"byte_end":133095,"line_start":730,"line_end":730,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133100,"byte_end":133133,"line_start":731,"line_end":731,"column_start":5,"column_end":38}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133138,"byte_end":133160,"line_start":732,"line_end":732,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133165,"byte_end":133198,"line_start":733,"line_end":733,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133203,"byte_end":133210,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133251,"byte_end":133257,"line_start":735,"line_end":735,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134075,"byte_end":134080,"line_start":762,"line_end":762,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S>>::entry","value":"fn (&mut self, key: K) -> Entry<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133465,"byte_end":133547,"line_start":742,"line_end":742,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133552,"byte_end":133555,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133560,"byte_end":133574,"line_start":744,"line_end":744,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133579,"byte_end":133582,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133587,"byte_end":133594,"line_start":746,"line_end":746,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133599,"byte_end":133626,"line_start":747,"line_end":747,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133631,"byte_end":133634,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133639,"byte_end":133676,"line_start":749,"line_end":749,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133681,"byte_end":133684,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133689,"byte_end":133740,"line_start":751,"line_end":751,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133745,"byte_end":133798,"line_start":752,"line_end":752,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133803,"byte_end":133825,"line_start":753,"line_end":753,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133830,"byte_end":133835,"line_start":754,"line_end":754,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133840,"byte_end":133843,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133848,"byte_end":133881,"line_start":756,"line_end":756,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133886,"byte_end":133919,"line_start":757,"line_end":757,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133924,"byte_end":133957,"line_start":758,"line_end":758,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":133962,"byte_end":134002,"line_start":759,"line_end":759,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134007,"byte_end":134014,"line_start":760,"line_end":760,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134055,"byte_end":134061,"line_start":761,"line_end":761,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135205,"byte_end":135208,"line_start":799,"line_end":799,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S>>::get","value":"fn <Q> (&self, k: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134557,"byte_end":134619,"line_start":779,"line_end":779,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134624,"byte_end":134627,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134632,"byte_end":134695,"line_start":781,"line_end":781,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134700,"byte_end":134767,"line_start":782,"line_end":782,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134772,"byte_end":134789,"line_start":783,"line_end":783,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134794,"byte_end":134797,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134802,"byte_end":134861,"line_start":785,"line_end":785,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134866,"byte_end":134930,"line_start":786,"line_end":786,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134935,"byte_end":134938,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134943,"byte_end":134957,"line_start":788,"line_end":788,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134962,"byte_end":134965,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134970,"byte_end":134977,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":134982,"byte_end":135009,"line_start":791,"line_end":791,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135014,"byte_end":135017,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135022,"byte_end":135055,"line_start":793,"line_end":793,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135060,"byte_end":135083,"line_start":794,"line_end":794,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135088,"byte_end":135128,"line_start":795,"line_end":795,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135133,"byte_end":135167,"line_start":796,"line_end":796,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135172,"byte_end":135179,"line_start":797,"line_end":797,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135184,"byte_end":135193,"line_start":798,"line_end":798,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136051,"byte_end":136064,"line_start":827,"line_end":827,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S>>::get_key_value","value":"fn <Q> (&self, k: &Q) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135365,"byte_end":135430,"line_start":807,"line_end":807,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135435,"byte_end":135438,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135443,"byte_end":135515,"line_start":809,"line_end":809,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135520,"byte_end":135587,"line_start":810,"line_end":810,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135592,"byte_end":135609,"line_start":811,"line_end":811,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135614,"byte_end":135617,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135622,"byte_end":135681,"line_start":813,"line_end":813,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135686,"byte_end":135750,"line_start":814,"line_end":814,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135755,"byte_end":135758,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135763,"byte_end":135777,"line_start":816,"line_end":816,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135782,"byte_end":135785,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135790,"byte_end":135797,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135802,"byte_end":135829,"line_start":819,"line_end":819,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135834,"byte_end":135837,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135842,"byte_end":135875,"line_start":821,"line_end":821,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135880,"byte_end":135903,"line_start":822,"line_end":822,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135908,"byte_end":135964,"line_start":823,"line_end":823,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":135969,"byte_end":136013,"line_start":824,"line_end":824,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136018,"byte_end":136025,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136030,"byte_end":136039,"line_start":826,"line_end":826,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137305,"byte_end":137322,"line_start":865,"line_end":865,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<HashMap<K, V, S>>::get_key_value_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136437,"byte_end":136537,"line_start":841,"line_end":841,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136542,"byte_end":136545,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136550,"byte_end":136622,"line_start":843,"line_end":843,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136627,"byte_end":136694,"line_start":844,"line_end":844,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136699,"byte_end":136716,"line_start":845,"line_end":845,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136721,"byte_end":136724,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136729,"byte_end":136788,"line_start":847,"line_end":847,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136793,"byte_end":136857,"line_start":848,"line_end":848,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136862,"byte_end":136865,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136870,"byte_end":136884,"line_start":850,"line_end":850,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136889,"byte_end":136892,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136897,"byte_end":136904,"line_start":852,"line_end":852,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136909,"byte_end":136936,"line_start":853,"line_end":853,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136941,"byte_end":136944,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136949,"byte_end":136982,"line_start":855,"line_end":855,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":136987,"byte_end":137010,"line_start":856,"line_end":856,"column_start":5,"column_end":28}},{"value":"/ let (k, v) = map.get_key_value_mut(&1).unwrap();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137015,"byte_end":137067,"line_start":857,"line_end":857,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(k, &1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137072,"byte_end":137094,"line_start":858,"line_end":858,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(v, &mut \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137099,"byte_end":137127,"line_start":859,"line_end":859,"column_start":5,"column_end":33}},{"value":"/ *v = \"b\";","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137132,"byte_end":137145,"line_start":860,"line_end":860,"column_start":5,"column_end":18}},{"value":"/ assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137150,"byte_end":137214,"line_start":861,"line_end":861,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(map.get_key_value_mut(&2), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137219,"byte_end":137267,"line_start":862,"line_end":862,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137272,"byte_end":137279,"line_start":863,"line_end":863,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137284,"byte_end":137293,"line_start":864,"line_end":864,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138414,"byte_end":138426,"line_start":899,"line_end":899,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S>>::contains_key","value":"fn <Q> (&self, k: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137711,"byte_end":137780,"line_start":879,"line_end":879,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137785,"byte_end":137788,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137793,"byte_end":137856,"line_start":881,"line_end":881,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137861,"byte_end":137928,"line_start":882,"line_end":882,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137933,"byte_end":137950,"line_start":883,"line_end":883,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137955,"byte_end":137958,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":137963,"byte_end":138022,"line_start":885,"line_end":885,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138027,"byte_end":138091,"line_start":886,"line_end":886,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138096,"byte_end":138099,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138104,"byte_end":138118,"line_start":888,"line_end":888,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138123,"byte_end":138126,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138131,"byte_end":138138,"line_start":890,"line_end":890,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138143,"byte_end":138170,"line_start":891,"line_end":891,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138175,"byte_end":138178,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138183,"byte_end":138216,"line_start":893,"line_end":893,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138221,"byte_end":138244,"line_start":894,"line_end":894,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138249,"byte_end":138292,"line_start":895,"line_end":895,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138297,"byte_end":138341,"line_start":896,"line_end":896,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138346,"byte_end":138353,"line_start":897,"line_end":897,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138394,"byte_end":138400,"line_start":898,"line_end":898,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139277,"byte_end":139284,"line_start":929,"line_end":929,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S>>::get_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138561,"byte_end":138631,"line_start":907,"line_end":907,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138636,"byte_end":138639,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138644,"byte_end":138707,"line_start":909,"line_end":909,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138712,"byte_end":138779,"line_start":910,"line_end":910,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138784,"byte_end":138801,"line_start":911,"line_end":911,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138806,"byte_end":138809,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138814,"byte_end":138873,"line_start":913,"line_end":913,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138878,"byte_end":138942,"line_start":914,"line_end":914,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138947,"byte_end":138950,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138955,"byte_end":138969,"line_start":916,"line_end":916,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138974,"byte_end":138977,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138982,"byte_end":138989,"line_start":918,"line_end":918,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":138994,"byte_end":139021,"line_start":919,"line_end":919,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139026,"byte_end":139029,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139034,"byte_end":139067,"line_start":921,"line_end":921,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139072,"byte_end":139095,"line_start":922,"line_end":922,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139100,"byte_end":139138,"line_start":923,"line_end":923,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139143,"byte_end":139160,"line_start":924,"line_end":924,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139165,"byte_end":139170,"line_start":925,"line_end":925,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139175,"byte_end":139204,"line_start":926,"line_end":926,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139209,"byte_end":139216,"line_start":927,"line_end":927,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139257,"byte_end":139263,"line_start":928,"line_end":928,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140555,"byte_end":140561,"line_start":966,"line_end":966,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S>>::insert","value":"fn (&mut self, k: K, v: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139580,"byte_end":139622,"line_start":940,"line_end":940,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139627,"byte_end":139630,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139635,"byte_end":139702,"line_start":942,"line_end":942,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139707,"byte_end":139710,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139715,"byte_end":139790,"line_start":944,"line_end":944,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139795,"byte_end":139866,"line_start":945,"line_end":945,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139871,"byte_end":139944,"line_start":946,"line_end":946,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139949,"byte_end":139977,"line_start":947,"line_end":947,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139982,"byte_end":139985,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":139990,"byte_end":140070,"line_start":949,"line_end":949,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140075,"byte_end":140143,"line_start":950,"line_end":950,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140148,"byte_end":140151,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140156,"byte_end":140170,"line_start":952,"line_end":952,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140175,"byte_end":140178,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140183,"byte_end":140190,"line_start":954,"line_end":954,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140195,"byte_end":140222,"line_start":955,"line_end":955,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140227,"byte_end":140230,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140235,"byte_end":140268,"line_start":957,"line_end":957,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140273,"byte_end":140315,"line_start":958,"line_end":958,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140320,"byte_end":140358,"line_start":959,"line_end":959,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140363,"byte_end":140366,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140371,"byte_end":140395,"line_start":961,"line_end":961,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140400,"byte_end":140447,"line_start":962,"line_end":962,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140452,"byte_end":140482,"line_start":963,"line_end":963,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140487,"byte_end":140494,"line_start":964,"line_end":964,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":140535,"byte_end":140541,"line_start":965,"line_end":965,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141778,"byte_end":141784,"line_start":1001,"line_end":1001,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S>>::remove","value":"fn <Q> (&mut self, k: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141044,"byte_end":141117,"line_start":980,"line_end":980,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141122,"byte_end":141152,"line_start":981,"line_end":981,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141157,"byte_end":141160,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141165,"byte_end":141228,"line_start":983,"line_end":983,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141233,"byte_end":141300,"line_start":984,"line_end":984,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141305,"byte_end":141322,"line_start":985,"line_end":985,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141327,"byte_end":141330,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141335,"byte_end":141394,"line_start":987,"line_end":987,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141399,"byte_end":141463,"line_start":988,"line_end":988,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141468,"byte_end":141471,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141476,"byte_end":141490,"line_start":990,"line_end":990,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141495,"byte_end":141498,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141503,"byte_end":141510,"line_start":992,"line_end":992,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141515,"byte_end":141542,"line_start":993,"line_end":993,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141547,"byte_end":141550,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141555,"byte_end":141588,"line_start":995,"line_end":995,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141593,"byte_end":141616,"line_start":996,"line_end":996,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141621,"byte_end":141663,"line_start":997,"line_end":997,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141668,"byte_end":141705,"line_start":998,"line_end":998,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141710,"byte_end":141717,"line_start":999,"line_end":999,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141758,"byte_end":141764,"line_start":1000,"line_end":1000,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142692,"byte_end":142704,"line_start":1030,"line_end":1030,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S>>::remove_entry","value":"fn <Q> (&mut self, k: &Q) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":141943,"byte_end":142016,"line_start":1009,"line_end":1009,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142021,"byte_end":142055,"line_start":1010,"line_end":1010,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142060,"byte_end":142063,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142068,"byte_end":142131,"line_start":1012,"line_end":1012,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142136,"byte_end":142203,"line_start":1013,"line_end":1013,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142208,"byte_end":142225,"line_start":1014,"line_end":1014,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142230,"byte_end":142233,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142238,"byte_end":142297,"line_start":1016,"line_end":1016,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142302,"byte_end":142366,"line_start":1017,"line_end":1017,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142371,"byte_end":142374,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142379,"byte_end":142393,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142398,"byte_end":142401,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142406,"byte_end":142413,"line_start":1021,"line_end":1021,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142418,"byte_end":142445,"line_start":1022,"line_end":1022,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142450,"byte_end":142453,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142458,"byte_end":142491,"line_start":1024,"line_end":1024,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142496,"byte_end":142519,"line_start":1025,"line_end":1025,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142524,"byte_end":142577,"line_start":1026,"line_end":1026,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142582,"byte_end":142619,"line_start":1027,"line_end":1027,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142624,"byte_end":142631,"line_start":1028,"line_end":1028,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":142672,"byte_end":142678,"line_start":1029,"line_end":1029,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145102,"byte_end":145115,"line_start":1080,"line_end":1080,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S>>::raw_entry_mut","value":"fn (&mut self) -> RawEntryBuilderMut<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143162,"byte_end":143210,"line_start":1048,"line_end":1048,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143215,"byte_end":143218,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143223,"byte_end":143292,"line_start":1050,"line_end":1050,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143297,"byte_end":143370,"line_start":1051,"line_end":1051,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143375,"byte_end":143445,"line_start":1052,"line_end":1052,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143450,"byte_end":143496,"line_start":1053,"line_end":1053,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143501,"byte_end":143504,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143509,"byte_end":143566,"line_start":1055,"line_end":1055,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143571,"byte_end":143574,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143579,"byte_end":143601,"line_start":1057,"line_end":1057,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143606,"byte_end":143683,"line_start":1058,"line_end":1058,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143688,"byte_end":143752,"line_start":1059,"line_end":1059,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143757,"byte_end":143817,"line_start":1060,"line_end":1060,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143822,"byte_end":143825,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143830,"byte_end":143907,"line_start":1062,"line_end":1062,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143912,"byte_end":143987,"line_start":1063,"line_end":1063,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143992,"byte_end":144068,"line_start":1064,"line_end":1064,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144073,"byte_end":144144,"line_start":1065,"line_end":1065,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144149,"byte_end":144152,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144157,"byte_end":144232,"line_start":1067,"line_end":1067,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144237,"byte_end":144316,"line_start":1068,"line_end":1068,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144321,"byte_end":144396,"line_start":1069,"line_end":1069,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144401,"byte_end":144463,"line_start":1070,"line_end":1070,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144468,"byte_end":144471,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144476,"byte_end":144546,"line_start":1072,"line_end":1072,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144551,"byte_end":144631,"line_start":1073,"line_end":1073,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144636,"byte_end":144708,"line_start":1074,"line_end":1074,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144713,"byte_end":144789,"line_start":1075,"line_end":1075,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144794,"byte_end":144869,"line_start":1076,"line_end":1076,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144874,"byte_end":144956,"line_start":1077,"line_end":1077,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":144961,"byte_end":145041,"line_start":1078,"line_end":1078,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145082,"byte_end":145088,"line_start":1079,"line_end":1079,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145953,"byte_end":145962,"line_start":1100,"line_end":1100,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S>>::raw_entry","value":"fn (&self) -> RawEntryBuilder<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145216,"byte_end":145274,"line_start":1084,"line_end":1084,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145279,"byte_end":145282,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145287,"byte_end":145356,"line_start":1086,"line_end":1086,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145361,"byte_end":145434,"line_start":1087,"line_end":1087,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145439,"byte_end":145466,"line_start":1088,"line_end":1088,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145471,"byte_end":145474,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145479,"byte_end":145501,"line_start":1090,"line_end":1090,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145506,"byte_end":145528,"line_start":1091,"line_end":1091,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145533,"byte_end":145597,"line_start":1092,"line_end":1092,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145602,"byte_end":145662,"line_start":1093,"line_end":1093,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145667,"byte_end":145670,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145675,"byte_end":145756,"line_start":1095,"line_end":1095,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145761,"byte_end":145791,"line_start":1096,"line_end":1096,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145796,"byte_end":145799,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145804,"byte_end":145892,"line_start":1098,"line_end":1098,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":145933,"byte_end":145939,"line_start":1099,"line_end":1099,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":886},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147696,"byte_end":147700,"line_start":1176,"line_end":1176,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147441,"byte_end":147489,"line_start":1169,"line_end":1169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147490,"byte_end":147493,"line_start":1170,"line_end":1170,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147494,"byte_end":147569,"line_start":1171,"line_end":1171,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147570,"byte_end":147597,"line_start":1172,"line_end":1172,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147598,"byte_end":147601,"line_start":1173,"line_end":1173,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147602,"byte_end":147647,"line_start":1174,"line_end":1174,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147648,"byte_end":147684,"line_start":1175,"line_end":1175,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":900},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148520,"byte_end":148527,"line_start":1205,"line_end":1205,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148246,"byte_end":148301,"line_start":1198,"line_end":1198,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148302,"byte_end":148305,"line_start":1199,"line_end":1199,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148306,"byte_end":148385,"line_start":1200,"line_end":1200,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148386,"byte_end":148413,"line_start":1201,"line_end":1201,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148414,"byte_end":148417,"line_start":1202,"line_end":1202,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148418,"byte_end":148471,"line_start":1203,"line_end":1203,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148472,"byte_end":148508,"line_start":1204,"line_end":1204,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":913},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149526,"byte_end":149534,"line_start":1234,"line_end":1234,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":916}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149210,"byte_end":149265,"line_start":1227,"line_end":1227,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149266,"byte_end":149269,"line_start":1228,"line_end":1228,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149270,"byte_end":149341,"line_start":1229,"line_end":1229,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149342,"byte_end":149417,"line_start":1230,"line_end":1230,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149418,"byte_end":149421,"line_start":1231,"line_end":1231,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149422,"byte_end":149477,"line_start":1232,"line_end":1232,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149478,"byte_end":149514,"line_start":1233,"line_end":1233,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":921},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150129,"byte_end":150133,"line_start":1256,"line_end":1256,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":925}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149877,"byte_end":149922,"line_start":1249,"line_end":1249,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149923,"byte_end":149926,"line_start":1250,"line_end":1250,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149927,"byte_end":150002,"line_start":1251,"line_end":1251,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150003,"byte_end":150030,"line_start":1252,"line_end":1252,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150031,"byte_end":150034,"line_start":1253,"line_end":1253,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150035,"byte_end":150080,"line_start":1254,"line_end":1254,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150081,"byte_end":150117,"line_start":1255,"line_end":1255,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":934},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150857,"byte_end":150863,"line_start":1283,"line_end":1283,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":938}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150597,"byte_end":150644,"line_start":1276,"line_end":1276,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150645,"byte_end":150648,"line_start":1277,"line_end":1277,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150649,"byte_end":150726,"line_start":1278,"line_end":1278,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150727,"byte_end":150754,"line_start":1279,"line_end":1279,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150755,"byte_end":150758,"line_start":1280,"line_end":1280,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150759,"byte_end":150808,"line_start":1281,"line_end":1281,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150809,"byte_end":150845,"line_start":1282,"line_end":1282,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":947},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151599,"byte_end":151604,"line_start":1310,"line_end":1310,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":951}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151333,"byte_end":151389,"line_start":1303,"line_end":1303,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151390,"byte_end":151393,"line_start":1304,"line_end":1304,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151394,"byte_end":151470,"line_start":1305,"line_end":1305,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151471,"byte_end":151498,"line_start":1306,"line_end":1306,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151499,"byte_end":151502,"line_start":1307,"line_end":1307,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151503,"byte_end":151550,"line_start":1308,"line_end":1308,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151551,"byte_end":151587,"line_start":1309,"line_end":1309,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":956},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152274,"byte_end":152285,"line_start":1332,"line_end":1332,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::map::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963}],"decl_id":null,"docs":" A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151953,"byte_end":152043,"line_start":1325,"line_end":1325,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152044,"byte_end":152047,"line_start":1326,"line_end":1326,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152048,"byte_end":152131,"line_start":1327,"line_end":1327,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152132,"byte_end":152159,"line_start":1328,"line_end":1328,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152160,"byte_end":152163,"line_start":1329,"line_end":1329,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashMap.html#method.drain_filter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152164,"byte_end":152225,"line_start":1330,"line_end":1330,"column_start":1,"column_end":62}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152226,"byte_end":152262,"line_start":1331,"line_end":1331,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":991},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153861,"byte_end":153870,"line_start":1392,"line_end":1392,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":995}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153582,"byte_end":153636,"line_start":1385,"line_end":1385,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153637,"byte_end":153640,"line_start":1386,"line_end":1386,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153641,"byte_end":153722,"line_start":1387,"line_end":1387,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153723,"byte_end":153750,"line_start":1388,"line_end":1388,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153751,"byte_end":153754,"line_start":1389,"line_end":1389,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153755,"byte_end":153812,"line_start":1390,"line_end":1390,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153813,"byte_end":153849,"line_start":1391,"line_end":1391,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":996},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154157,"byte_end":154175,"line_start":1401,"line_end":1401,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":1001}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153916,"byte_end":154000,"line_start":1396,"line_end":1396,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154001,"byte_end":154004,"line_start":1397,"line_end":1397,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154005,"byte_end":154068,"line_start":1398,"line_end":1398,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154069,"byte_end":154072,"line_start":1399,"line_end":1399,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154073,"byte_end":154145,"line_start":1400,"line_end":1400,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1007},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154780,"byte_end":154788,"line_start":1418,"line_end":1418,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut<'a, K, V>)","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154753,"byte_end":154775,"line_start":1417,"line_end":1417,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1010},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154849,"byte_end":154855,"line_start":1420,"line_end":1420,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut<'a, K, V, S>)","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154825,"byte_end":154844,"line_start":1419,"line_end":1419,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1002},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154722,"byte_end":154733,"line_start":1416,"line_end":1416,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"RawEntryMut::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1010}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154229,"byte_end":154309,"line_start":1405,"line_end":1405,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154310,"byte_end":154313,"line_start":1406,"line_end":1406,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154314,"byte_end":154361,"line_start":1407,"line_end":1407,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154362,"byte_end":154365,"line_start":1408,"line_end":1408,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154366,"byte_end":154449,"line_start":1409,"line_end":1409,"column_start":1,"column_end":84}},{"value":"/ then calling one of the methods of that [`RawEntryBuilderMut`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154450,"byte_end":154517,"line_start":1410,"line_end":1410,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154518,"byte_end":154521,"line_start":1411,"line_end":1411,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154522,"byte_end":154558,"line_start":1412,"line_end":1412,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154559,"byte_end":154589,"line_start":1413,"line_end":1413,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154590,"byte_end":154653,"line_start":1414,"line_end":1414,"column_start":1,"column_end":64}},{"value":"/ [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154654,"byte_end":154712,"line_start":1415,"line_end":1415,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1013},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155044,"byte_end":155063,"line_start":1427,"line_end":1427,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154892,"byte_end":154941,"line_start":1423,"line_end":1423,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154942,"byte_end":154985,"line_start":1424,"line_end":1424,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154986,"byte_end":154989,"line_start":1425,"line_end":1425,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":154990,"byte_end":155032,"line_start":1426,"line_end":1426,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1025},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155478,"byte_end":155495,"line_start":1449,"line_end":1449,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1031}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155329,"byte_end":155375,"line_start":1445,"line_end":1445,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155376,"byte_end":155419,"line_start":1446,"line_end":1446,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155420,"byte_end":155423,"line_start":1447,"line_end":1447,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155424,"byte_end":155466,"line_start":1448,"line_end":1448,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1032},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155805,"byte_end":155820,"line_start":1459,"line_end":1459,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":1037}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155576,"byte_end":155660,"line_start":1454,"line_end":1454,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155661,"byte_end":155664,"line_start":1455,"line_end":1455,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155665,"byte_end":155724,"line_start":1456,"line_end":1456,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155725,"byte_end":155728,"line_start":1457,"line_end":1457,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155729,"byte_end":155793,"line_start":1458,"line_end":1458,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156078,"byte_end":156086,"line_start":1467,"line_end":1467,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"fn <Q> (self, k: &Q) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155926,"byte_end":155973,"line_start":1464,"line_end":1464,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156014,"byte_end":156020,"line_start":1465,"line_end":1465,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156027,"byte_end":156066,"line_start":1466,"line_end":1466,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156513,"byte_end":156536,"line_start":1481,"line_end":1481,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"fn <Q> (self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156383,"byte_end":156443,"line_start":1478,"line_end":1478,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156448,"byte_end":156457,"line_start":1479,"line_end":1479,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156462,"byte_end":156501,"line_start":1480,"line_end":1480,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156922,"byte_end":156931,"line_start":1494,"line_end":1494,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"fn <F> (self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156769,"byte_end":156817,"line_start":1491,"line_end":1491,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156858,"byte_end":156864,"line_start":1492,"line_end":1492,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156871,"byte_end":156910,"line_start":1493,"line_end":1493,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":157872,"byte_end":157880,"line_start":1523,"line_end":1523,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"fn <Q> (self, k: &Q) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":157740,"byte_end":157767,"line_start":1520,"line_end":1520,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":157808,"byte_end":157814,"line_start":1521,"line_end":1521,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":157821,"byte_end":157860,"line_start":1522,"line_end":1522,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":158322,"byte_end":158345,"line_start":1537,"line_end":1537,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"fn <Q> (self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":158175,"byte_end":158217,"line_start":1534,"line_end":1534,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":158258,"byte_end":158264,"line_start":1535,"line_end":1535,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":158271,"byte_end":158310,"line_start":1536,"line_end":1536,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159059,"byte_end":159068,"line_start":1562,"line_end":1562,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"fn <F> (self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":158926,"byte_end":158954,"line_start":1559,"line_end":1559,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":158995,"byte_end":159001,"line_start":1560,"line_end":1560,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159008,"byte_end":159047,"line_start":1561,"line_end":1561,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159712,"byte_end":159718,"line_start":1584,"line_end":1584,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawEntryMut>::insert","value":"fn (self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RawOccupiedEntryMut.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RawOccupiedEntryMut.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159268,"byte_end":159335,"line_start":1571,"line_end":1571,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159340,"byte_end":159343,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159348,"byte_end":159362,"line_start":1573,"line_end":1573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159367,"byte_end":159370,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159375,"byte_end":159382,"line_start":1575,"line_end":1575,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159387,"byte_end":159414,"line_start":1576,"line_end":1576,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159419,"byte_end":159422,"line_start":1577,"line_end":1577,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159427,"byte_end":159480,"line_start":1578,"line_end":1578,"column_start":5,"column_end":58}},{"value":"/ let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159485,"byte_end":159569,"line_start":1579,"line_end":1579,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159574,"byte_end":159577,"line_start":1580,"line_end":1580,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.remove_entry(), (\"horseyland\", 37));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159582,"byte_end":159639,"line_start":1581,"line_end":1581,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159644,"byte_end":159651,"line_start":1582,"line_end":1582,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159692,"byte_end":159698,"line_start":1583,"line_end":1583,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160695,"byte_end":160704,"line_start":1615,"line_end":1615,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"fn (self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160072,"byte_end":160154,"line_start":1598,"line_end":1598,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160159,"byte_end":160216,"line_start":1599,"line_end":1599,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160221,"byte_end":160224,"line_start":1600,"line_end":1600,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160229,"byte_end":160243,"line_start":1601,"line_end":1601,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160248,"byte_end":160251,"line_start":1602,"line_end":1602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160256,"byte_end":160263,"line_start":1603,"line_end":1603,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160268,"byte_end":160295,"line_start":1604,"line_end":1604,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160300,"byte_end":160303,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160308,"byte_end":160361,"line_start":1606,"line_end":1606,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160366,"byte_end":160369,"line_start":1607,"line_end":1607,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160374,"byte_end":160446,"line_start":1608,"line_end":1608,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160451,"byte_end":160487,"line_start":1609,"line_end":1609,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160492,"byte_end":160495,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160500,"byte_end":160581,"line_start":1611,"line_end":1611,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160586,"byte_end":160622,"line_start":1612,"line_end":1612,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160627,"byte_end":160634,"line_start":1613,"line_end":1613,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":160675,"byte_end":160681,"line_start":1614,"line_end":1614,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161608,"byte_end":161622,"line_start":1643,"line_end":1643,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"fn <F> (self, default: F) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161018,"byte_end":161111,"line_start":1626,"line_end":1626,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161116,"byte_end":161185,"line_start":1627,"line_end":1627,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161190,"byte_end":161193,"line_start":1628,"line_end":1628,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161198,"byte_end":161212,"line_start":1629,"line_end":1629,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161217,"byte_end":161220,"line_start":1630,"line_end":1630,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161225,"byte_end":161232,"line_start":1631,"line_end":1631,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161237,"byte_end":161264,"line_start":1632,"line_end":1632,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161269,"byte_end":161272,"line_start":1633,"line_end":1633,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161277,"byte_end":161333,"line_start":1634,"line_end":1634,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161338,"byte_end":161341,"line_start":1635,"line_end":1635,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161346,"byte_end":161411,"line_start":1636,"line_end":1636,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161416,"byte_end":161457,"line_start":1637,"line_end":1637,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161462,"byte_end":161469,"line_start":1638,"line_end":1638,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161474,"byte_end":161477,"line_start":1639,"line_end":1639,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161482,"byte_end":161535,"line_start":1640,"line_end":1640,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161540,"byte_end":161547,"line_start":1641,"line_end":1641,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":161588,"byte_end":161594,"line_start":1642,"line_end":1642,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162718,"byte_end":162728,"line_start":1681,"line_end":1681,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162001,"byte_end":162069,"line_start":1658,"line_end":1658,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162074,"byte_end":162109,"line_start":1659,"line_end":1659,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162114,"byte_end":162117,"line_start":1660,"line_end":1660,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162122,"byte_end":162136,"line_start":1661,"line_end":1661,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162141,"byte_end":162144,"line_start":1662,"line_end":1662,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162149,"byte_end":162156,"line_start":1663,"line_end":1663,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162161,"byte_end":162188,"line_start":1664,"line_end":1664,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162193,"byte_end":162196,"line_start":1665,"line_end":1665,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162201,"byte_end":162254,"line_start":1666,"line_end":1666,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162259,"byte_end":162262,"line_start":1667,"line_end":1667,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162267,"byte_end":162290,"line_start":1668,"line_end":1668,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162295,"byte_end":162324,"line_start":1669,"line_end":1669,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162329,"byte_end":162368,"line_start":1670,"line_end":1670,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162373,"byte_end":162408,"line_start":1671,"line_end":1671,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162413,"byte_end":162450,"line_start":1672,"line_end":1672,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162455,"byte_end":162458,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162463,"byte_end":162486,"line_start":1674,"line_end":1674,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162491,"byte_end":162520,"line_start":1675,"line_end":1675,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162525,"byte_end":162564,"line_start":1676,"line_end":1676,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162569,"byte_end":162603,"line_start":1677,"line_end":1677,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162608,"byte_end":162645,"line_start":1678,"line_end":1678,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162650,"byte_end":162657,"line_start":1679,"line_end":1679,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":162698,"byte_end":162704,"line_start":1680,"line_end":1680,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163304,"byte_end":163307,"line_start":1701,"line_end":1701,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163198,"byte_end":163243,"line_start":1699,"line_end":1699,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163284,"byte_end":163290,"line_start":1700,"line_end":1700,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163489,"byte_end":163496,"line_start":1707,"line_end":1707,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"fn (&mut self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163375,"byte_end":163428,"line_start":1705,"line_end":1705,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163469,"byte_end":163475,"line_start":1706,"line_end":1706,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163757,"byte_end":163765,"line_start":1714,"line_end":1714,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"fn (self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163576,"byte_end":163647,"line_start":1711,"line_end":1711,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163652,"byte_end":163696,"line_start":1712,"line_end":1712,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163737,"byte_end":163743,"line_start":1713,"line_end":1713,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163951,"byte_end":163954,"line_start":1720,"line_end":1720,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163843,"byte_end":163890,"line_start":1718,"line_end":1718,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163931,"byte_end":163937,"line_start":1719,"line_end":1719,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164213,"byte_end":164221,"line_start":1727,"line_end":1727,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164022,"byte_end":164103,"line_start":1724,"line_end":1724,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164108,"byte_end":164152,"line_start":1725,"line_end":1725,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164193,"byte_end":164199,"line_start":1726,"line_end":1726,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164415,"byte_end":164422,"line_start":1733,"line_end":1733,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164299,"byte_end":164354,"line_start":1731,"line_end":1731,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164395,"byte_end":164401,"line_start":1732,"line_end":1732,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164618,"byte_end":164631,"line_start":1739,"line_end":1739,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"fn (&mut self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164502,"byte_end":164557,"line_start":1737,"line_end":1737,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164598,"byte_end":164604,"line_start":1738,"line_end":1738,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164904,"byte_end":164921,"line_start":1748,"line_end":1748,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"fn (&mut self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164780,"byte_end":164843,"line_start":1746,"line_end":1746,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":164884,"byte_end":164890,"line_start":1747,"line_end":1747,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165289,"byte_end":165303,"line_start":1758,"line_end":1758,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"fn (self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165090,"byte_end":165179,"line_start":1755,"line_end":1755,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165184,"byte_end":165228,"line_start":1756,"line_end":1756,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165269,"byte_end":165275,"line_start":1757,"line_end":1757,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165601,"byte_end":165607,"line_start":1767,"line_end":1767,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"fn (&mut self, value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165473,"byte_end":165540,"line_start":1765,"line_end":1765,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165581,"byte_end":165587,"line_start":1766,"line_end":1766,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165819,"byte_end":165829,"line_start":1773,"line_end":1773,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"fn (&mut self, key: K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165691,"byte_end":165758,"line_start":1771,"line_end":1771,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165799,"byte_end":165805,"line_start":1772,"line_end":1772,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166023,"byte_end":166029,"line_start":1779,"line_end":1779,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":165909,"byte_end":165962,"line_start":1777,"line_end":1777,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166003,"byte_end":166009,"line_start":1778,"line_end":1778,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166202,"byte_end":166214,"line_start":1785,"line_end":1785,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166084,"byte_end":166141,"line_start":1783,"line_end":1783,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166182,"byte_end":166188,"line_start":1784,"line_end":1784,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166570,"byte_end":166576,"line_start":1797,"line_end":1797,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"fn (self, key: K, value: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166403,"byte_end":166462,"line_start":1794,"line_end":1794,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166467,"byte_end":166509,"line_start":1795,"line_end":1795,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166550,"byte_end":166556,"line_start":1796,"line_end":1796,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":167055,"byte_end":167076,"line_start":1811,"line_end":1811,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"fn (self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166849,"byte_end":166908,"line_start":1807,"line_end":1807,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166913,"byte_end":166955,"line_start":1808,"line_end":1808,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166996,"byte_end":167002,"line_start":1809,"line_end":1809,"column_start":41,"column_end":47}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":167009,"byte_end":167043,"line_start":1810,"line_end":1810,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":167455,"byte_end":167473,"line_start":1822,"line_end":1822,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"fn <H> (self, hash: u64, key: K, value: V, hasher: H) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":167334,"byte_end":167394,"line_start":1820,"line_end":1820,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":167435,"byte_end":167441,"line_start":1821,"line_end":1821,"column_start":41,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1146},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169857,"byte_end":169865,"line_start":1903,"line_end":1903,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V, S>)","parent":{"krate":0,"index":1141},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169830,"byte_end":169852,"line_start":1902,"line_end":1902,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1149},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169924,"byte_end":169930,"line_start":1906,"line_end":1906,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V, S>)","parent":{"krate":0,"index":1141},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169900,"byte_end":169919,"line_start":1905,"line_end":1905,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1141},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169805,"byte_end":169810,"line_start":1901,"line_end":1901,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"Entry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":1146},{"krate":0,"index":1149}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169549,"byte_end":169629,"line_start":1895,"line_end":1895,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169630,"byte_end":169633,"line_start":1896,"line_end":1896,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169634,"byte_end":169706,"line_start":1897,"line_end":1897,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169707,"byte_end":169710,"line_start":1898,"line_end":1898,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169711,"byte_end":169747,"line_start":1899,"line_end":1899,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169748,"byte_end":169795,"line_start":1900,"line_end":1900,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1157},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170416,"byte_end":170429,"line_start":1922,"line_end":1922,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170282,"byte_end":170331,"line_start":1918,"line_end":1918,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170332,"byte_end":170369,"line_start":1919,"line_end":1919,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170370,"byte_end":170373,"line_start":1920,"line_end":1920,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170374,"byte_end":170404,"line_start":1921,"line_end":1921,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1178},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171154,"byte_end":171165,"line_start":1956,"line_end":1956,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171023,"byte_end":171069,"line_start":1952,"line_end":1952,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171070,"byte_end":171107,"line_start":1953,"line_end":1953,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171108,"byte_end":171111,"line_start":1954,"line_end":1954,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171112,"byte_end":171142,"line_start":1955,"line_end":1955,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178108,"byte_end":178114,"line_start":2214,"line_end":2214,"column_start":12,"column_end":18},"name":"insert","qualname":"<Entry>::insert","value":"fn (self, value: V) -> OccupiedEntry<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177716,"byte_end":177778,"line_start":2201,"line_end":2201,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177783,"byte_end":177786,"line_start":2202,"line_end":2202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177791,"byte_end":177805,"line_start":2203,"line_end":2203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177810,"byte_end":177813,"line_start":2204,"line_end":2204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177818,"byte_end":177825,"line_start":2205,"line_end":2205,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177830,"byte_end":177857,"line_start":2206,"line_end":2206,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177862,"byte_end":177865,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177870,"byte_end":177923,"line_start":2208,"line_end":2208,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177928,"byte_end":177979,"line_start":2209,"line_end":2209,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177984,"byte_end":177987,"line_start":2210,"line_end":2210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177992,"byte_end":178035,"line_start":2211,"line_end":2211,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178040,"byte_end":178047,"line_start":2212,"line_end":2212,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178088,"byte_end":178094,"line_start":2213,"line_end":2213,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178990,"byte_end":178999,"line_start":2245,"line_end":2245,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178440,"byte_end":178522,"line_start":2228,"line_end":2228,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178527,"byte_end":178577,"line_start":2229,"line_end":2229,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178582,"byte_end":178585,"line_start":2230,"line_end":2230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178590,"byte_end":178604,"line_start":2231,"line_end":2231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178609,"byte_end":178612,"line_start":2232,"line_end":2232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178617,"byte_end":178624,"line_start":2233,"line_end":2233,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178629,"byte_end":178656,"line_start":2234,"line_end":2234,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178661,"byte_end":178664,"line_start":2235,"line_end":2235,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178669,"byte_end":178722,"line_start":2236,"line_end":2236,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178727,"byte_end":178730,"line_start":2237,"line_end":2237,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178735,"byte_end":178775,"line_start":2238,"line_end":2238,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178780,"byte_end":178816,"line_start":2239,"line_end":2239,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178821,"byte_end":178824,"line_start":2240,"line_end":2240,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178829,"byte_end":178876,"line_start":2241,"line_end":2241,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178881,"byte_end":178917,"line_start":2242,"line_end":2242,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178922,"byte_end":178929,"line_start":2243,"line_end":2243,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":178970,"byte_end":178976,"line_start":2244,"line_end":2244,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179789,"byte_end":179803,"line_start":2272,"line_end":2272,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179245,"byte_end":179338,"line_start":2256,"line_end":2256,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179343,"byte_end":179405,"line_start":2257,"line_end":2257,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179410,"byte_end":179413,"line_start":2258,"line_end":2258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179418,"byte_end":179432,"line_start":2259,"line_end":2259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179437,"byte_end":179440,"line_start":2260,"line_end":2260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179445,"byte_end":179452,"line_start":2261,"line_end":2261,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179457,"byte_end":179484,"line_start":2262,"line_end":2262,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179489,"byte_end":179492,"line_start":2263,"line_end":2263,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179497,"byte_end":179553,"line_start":2264,"line_end":2264,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179558,"byte_end":179589,"line_start":2265,"line_end":2265,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179594,"byte_end":179597,"line_start":2266,"line_end":2266,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179602,"byte_end":179650,"line_start":2267,"line_end":2267,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179655,"byte_end":179658,"line_start":2268,"line_end":2268,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179663,"byte_end":179716,"line_start":2269,"line_end":2269,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179721,"byte_end":179728,"line_start":2270,"line_end":2270,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":179769,"byte_end":179775,"line_start":2271,"line_end":2271,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180631,"byte_end":180649,"line_start":2299,"line_end":2299,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function,\n which takes the key as its argument, and returns a mutable reference to the value in the\n entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180069,"byte_end":180164,"line_start":2283,"line_end":2283,"column_start":5,"column_end":100}},{"value":"/ which takes the key as its argument, and returns a mutable reference to the value in the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180169,"byte_end":180261,"line_start":2284,"line_end":2284,"column_start":5,"column_end":97}},{"value":"/ entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180266,"byte_end":180276,"line_start":2285,"line_end":2285,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180281,"byte_end":180284,"line_start":2286,"line_end":2286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180289,"byte_end":180303,"line_start":2287,"line_end":2287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180308,"byte_end":180311,"line_start":2288,"line_end":2288,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180316,"byte_end":180323,"line_start":2289,"line_end":2289,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180328,"byte_end":180355,"line_start":2290,"line_end":2290,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180360,"byte_end":180363,"line_start":2291,"line_end":2291,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, usize> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180368,"byte_end":180423,"line_start":2292,"line_end":2292,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180428,"byte_end":180431,"line_start":2293,"line_end":2293,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180436,"byte_end":180509,"line_start":2294,"line_end":2294,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180514,"byte_end":180517,"line_start":2295,"line_end":2295,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180522,"byte_end":180558,"line_start":2296,"line_end":2296,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180563,"byte_end":180570,"line_start":2297,"line_end":2297,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180611,"byte_end":180617,"line_start":2298,"line_end":2298,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181320,"byte_end":181323,"line_start":2324,"line_end":2324,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":180994,"byte_end":181038,"line_start":2313,"line_end":2313,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181043,"byte_end":181046,"line_start":2314,"line_end":2314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181051,"byte_end":181065,"line_start":2315,"line_end":2315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181070,"byte_end":181073,"line_start":2316,"line_end":2316,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181078,"byte_end":181085,"line_start":2317,"line_end":2317,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181090,"byte_end":181117,"line_start":2318,"line_end":2318,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181122,"byte_end":181125,"line_start":2319,"line_end":2319,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181130,"byte_end":181183,"line_start":2320,"line_end":2320,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181188,"byte_end":181247,"line_start":2321,"line_end":2321,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181252,"byte_end":181259,"line_start":2322,"line_end":2322,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181300,"byte_end":181306,"line_start":2323,"line_end":2323,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182112,"byte_end":182122,"line_start":2352,"line_end":2352,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181490,"byte_end":181558,"line_start":2331,"line_end":2331,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181563,"byte_end":181598,"line_start":2332,"line_end":2332,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181603,"byte_end":181606,"line_start":2333,"line_end":2333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181611,"byte_end":181625,"line_start":2334,"line_end":2334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181630,"byte_end":181633,"line_start":2335,"line_end":2335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181638,"byte_end":181645,"line_start":2336,"line_end":2336,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181650,"byte_end":181677,"line_start":2337,"line_end":2337,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181682,"byte_end":181685,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181690,"byte_end":181743,"line_start":2339,"line_end":2339,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181748,"byte_end":181751,"line_start":2340,"line_end":2340,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181756,"byte_end":181782,"line_start":2341,"line_end":2341,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181787,"byte_end":181822,"line_start":2342,"line_end":2342,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181827,"byte_end":181849,"line_start":2343,"line_end":2343,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181854,"byte_end":181891,"line_start":2344,"line_end":2344,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181896,"byte_end":181899,"line_start":2345,"line_end":2345,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181904,"byte_end":181930,"line_start":2346,"line_end":2346,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181935,"byte_end":181970,"line_start":2347,"line_end":2347,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":181975,"byte_end":181997,"line_start":2348,"line_end":2348,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182002,"byte_end":182039,"line_start":2349,"line_end":2349,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182044,"byte_end":182051,"line_start":2350,"line_end":2350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182092,"byte_end":182098,"line_start":2351,"line_end":2351,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182938,"byte_end":182948,"line_start":2381,"line_end":2381,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182472,"byte_end":182548,"line_start":2367,"line_end":2367,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182553,"byte_end":182615,"line_start":2368,"line_end":2368,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182620,"byte_end":182623,"line_start":2369,"line_end":2369,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182628,"byte_end":182642,"line_start":2370,"line_end":2370,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182647,"byte_end":182650,"line_start":2371,"line_end":2371,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182655,"byte_end":182662,"line_start":2372,"line_end":2372,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182667,"byte_end":182694,"line_start":2373,"line_end":2373,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182699,"byte_end":182702,"line_start":2374,"line_end":2374,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182707,"byte_end":182768,"line_start":2375,"line_end":2375,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182773,"byte_end":182813,"line_start":2376,"line_end":2376,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182818,"byte_end":182821,"line_start":2377,"line_end":2377,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182826,"byte_end":182865,"line_start":2378,"line_end":2378,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182870,"byte_end":182877,"line_start":2379,"line_end":2379,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182918,"byte_end":182924,"line_start":2380,"line_end":2380,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183615,"byte_end":183618,"line_start":2406,"line_end":2406,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183242,"byte_end":183287,"line_start":2394,"line_end":2394,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183292,"byte_end":183295,"line_start":2395,"line_end":2395,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183300,"byte_end":183314,"line_start":2396,"line_end":2396,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183319,"byte_end":183322,"line_start":2397,"line_end":2397,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183327,"byte_end":183334,"line_start":2398,"line_end":2398,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183339,"byte_end":183366,"line_start":2399,"line_end":2399,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183371,"byte_end":183374,"line_start":2400,"line_end":2400,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183379,"byte_end":183432,"line_start":2401,"line_end":2401,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183437,"byte_end":183478,"line_start":2402,"line_end":2402,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183483,"byte_end":183542,"line_start":2403,"line_end":2403,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183547,"byte_end":183554,"line_start":2404,"line_end":2404,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183595,"byte_end":183601,"line_start":2405,"line_end":2405,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184271,"byte_end":184283,"line_start":2429,"line_end":2429,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183686,"byte_end":183743,"line_start":2410,"line_end":2410,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183748,"byte_end":183751,"line_start":2411,"line_end":2411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183756,"byte_end":183770,"line_start":2412,"line_end":2412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183775,"byte_end":183778,"line_start":2413,"line_end":2413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183783,"byte_end":183790,"line_start":2414,"line_end":2414,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183795,"byte_end":183822,"line_start":2415,"line_end":2415,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183827,"byte_end":183862,"line_start":2416,"line_end":2416,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183867,"byte_end":183870,"line_start":2417,"line_end":2417,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183875,"byte_end":183928,"line_start":2418,"line_end":2418,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183933,"byte_end":183974,"line_start":2419,"line_end":2419,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183979,"byte_end":183982,"line_start":2420,"line_end":2420,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183987,"byte_end":184043,"line_start":2421,"line_end":2421,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184048,"byte_end":184092,"line_start":2422,"line_end":2422,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184097,"byte_end":184122,"line_start":2423,"line_end":2423,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184127,"byte_end":184132,"line_start":2424,"line_end":2424,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184137,"byte_end":184140,"line_start":2425,"line_end":2425,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184145,"byte_end":184198,"line_start":2426,"line_end":2426,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184203,"byte_end":184210,"line_start":2427,"line_end":2427,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184251,"byte_end":184257,"line_start":2428,"line_end":2428,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184893,"byte_end":184896,"line_start":2452,"line_end":2452,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184425,"byte_end":184472,"line_start":2436,"line_end":2436,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184477,"byte_end":184480,"line_start":2437,"line_end":2437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184485,"byte_end":184499,"line_start":2438,"line_end":2438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184504,"byte_end":184507,"line_start":2439,"line_end":2439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184512,"byte_end":184519,"line_start":2440,"line_end":2440,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184524,"byte_end":184551,"line_start":2441,"line_end":2441,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184556,"byte_end":184591,"line_start":2442,"line_end":2442,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184596,"byte_end":184599,"line_start":2443,"line_end":2443,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184604,"byte_end":184657,"line_start":2444,"line_end":2444,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184662,"byte_end":184703,"line_start":2445,"line_end":2445,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184708,"byte_end":184711,"line_start":2446,"line_end":2446,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184716,"byte_end":184772,"line_start":2447,"line_end":2447,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184777,"byte_end":184810,"line_start":2448,"line_end":2448,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184815,"byte_end":184820,"line_start":2449,"line_end":2449,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184825,"byte_end":184832,"line_start":2450,"line_end":2450,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184873,"byte_end":184879,"line_start":2451,"line_end":2451,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185856,"byte_end":185863,"line_start":2484,"line_end":2484,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":184964,"byte_end":185019,"line_start":2456,"line_end":2456,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185024,"byte_end":185027,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185032,"byte_end":185104,"line_start":2458,"line_end":2458,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185109,"byte_end":185164,"line_start":2459,"line_end":2459,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185169,"byte_end":185172,"line_start":2460,"line_end":2460,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185177,"byte_end":185211,"line_start":2461,"line_end":2461,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185216,"byte_end":185219,"line_start":2462,"line_end":2462,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185224,"byte_end":185238,"line_start":2463,"line_end":2463,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185243,"byte_end":185246,"line_start":2464,"line_end":2464,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185251,"byte_end":185258,"line_start":2465,"line_end":2465,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185263,"byte_end":185290,"line_start":2466,"line_end":2466,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185295,"byte_end":185330,"line_start":2467,"line_end":2467,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185335,"byte_end":185338,"line_start":2468,"line_end":2468,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185343,"byte_end":185396,"line_start":2469,"line_end":2469,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185401,"byte_end":185442,"line_start":2470,"line_end":2470,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185447,"byte_end":185450,"line_start":2471,"line_end":2471,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185455,"byte_end":185492,"line_start":2472,"line_end":2472,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185497,"byte_end":185557,"line_start":2473,"line_end":2473,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185562,"byte_end":185589,"line_start":2474,"line_end":2474,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185594,"byte_end":185627,"line_start":2475,"line_end":2475,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185632,"byte_end":185635,"line_start":2476,"line_end":2476,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185640,"byte_end":185692,"line_start":2477,"line_end":2477,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185697,"byte_end":185723,"line_start":2478,"line_end":2478,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185728,"byte_end":185733,"line_start":2479,"line_end":2479,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185738,"byte_end":185741,"line_start":2480,"line_end":2480,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185746,"byte_end":185783,"line_start":2481,"line_end":2481,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185788,"byte_end":185795,"line_start":2482,"line_end":2482,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185836,"byte_end":185842,"line_start":2483,"line_end":2483,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186715,"byte_end":186723,"line_start":2512,"line_end":2512,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":185943,"byte_end":186024,"line_start":2488,"line_end":2488,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186029,"byte_end":186073,"line_start":2489,"line_end":2489,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186078,"byte_end":186081,"line_start":2490,"line_end":2490,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186086,"byte_end":186162,"line_start":2491,"line_end":2491,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186167,"byte_end":186170,"line_start":2492,"line_end":2492,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186175,"byte_end":186207,"line_start":2493,"line_end":2493,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186212,"byte_end":186215,"line_start":2494,"line_end":2494,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186220,"byte_end":186234,"line_start":2495,"line_end":2495,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186239,"byte_end":186242,"line_start":2496,"line_end":2496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186247,"byte_end":186254,"line_start":2497,"line_end":2497,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186259,"byte_end":186286,"line_start":2498,"line_end":2498,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186291,"byte_end":186326,"line_start":2499,"line_end":2499,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186331,"byte_end":186334,"line_start":2500,"line_end":2500,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186339,"byte_end":186392,"line_start":2501,"line_end":2501,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186397,"byte_end":186438,"line_start":2502,"line_end":2502,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186443,"byte_end":186446,"line_start":2503,"line_end":2503,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186451,"byte_end":186488,"line_start":2504,"line_end":2504,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186493,"byte_end":186549,"line_start":2505,"line_end":2505,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186554,"byte_end":186582,"line_start":2506,"line_end":2506,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186587,"byte_end":186592,"line_start":2507,"line_end":2507,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186597,"byte_end":186600,"line_start":2508,"line_end":2508,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186605,"byte_end":186642,"line_start":2509,"line_end":2509,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186647,"byte_end":186654,"line_start":2510,"line_end":2510,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186695,"byte_end":186701,"line_start":2511,"line_end":2511,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187347,"byte_end":187353,"line_start":2534,"line_end":2534,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, mut value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186801,"byte_end":186868,"line_start":2516,"line_end":2516,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186873,"byte_end":186876,"line_start":2517,"line_end":2517,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186881,"byte_end":186895,"line_start":2518,"line_end":2518,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186900,"byte_end":186903,"line_start":2519,"line_end":2519,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186908,"byte_end":186915,"line_start":2520,"line_end":2520,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186920,"byte_end":186947,"line_start":2521,"line_end":2521,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186952,"byte_end":186987,"line_start":2522,"line_end":2522,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":186992,"byte_end":186995,"line_start":2523,"line_end":2523,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187000,"byte_end":187053,"line_start":2524,"line_end":2524,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187058,"byte_end":187099,"line_start":2525,"line_end":2525,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187104,"byte_end":187107,"line_start":2526,"line_end":2526,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187112,"byte_end":187172,"line_start":2527,"line_end":2527,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187177,"byte_end":187214,"line_start":2528,"line_end":2528,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187219,"byte_end":187224,"line_start":2529,"line_end":2529,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187229,"byte_end":187232,"line_start":2530,"line_end":2530,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187237,"byte_end":187274,"line_start":2531,"line_end":2531,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187279,"byte_end":187286,"line_start":2532,"line_end":2532,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187327,"byte_end":187333,"line_start":2533,"line_end":2533,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188035,"byte_end":188041,"line_start":2558,"line_end":2558,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187493,"byte_end":187546,"line_start":2540,"line_end":2540,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187551,"byte_end":187554,"line_start":2541,"line_end":2541,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187559,"byte_end":187573,"line_start":2542,"line_end":2542,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187578,"byte_end":187581,"line_start":2543,"line_end":2543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187586,"byte_end":187593,"line_start":2544,"line_end":2544,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187598,"byte_end":187625,"line_start":2545,"line_end":2545,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187630,"byte_end":187665,"line_start":2546,"line_end":2546,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187670,"byte_end":187673,"line_start":2547,"line_end":2547,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187678,"byte_end":187731,"line_start":2548,"line_end":2548,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187736,"byte_end":187777,"line_start":2549,"line_end":2549,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187782,"byte_end":187785,"line_start":2550,"line_end":2550,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187790,"byte_end":187846,"line_start":2551,"line_end":2551,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187851,"byte_end":187886,"line_start":2552,"line_end":2552,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187891,"byte_end":187896,"line_start":2553,"line_end":2553,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187901,"byte_end":187904,"line_start":2554,"line_end":2554,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187909,"byte_end":187962,"line_start":2555,"line_end":2555,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":187967,"byte_end":187974,"line_start":2556,"line_end":2556,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188015,"byte_end":188021,"line_start":2557,"line_end":2557,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188861,"byte_end":188874,"line_start":2583,"line_end":2583,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"fn (self, value: V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188096,"byte_end":188188,"line_start":2562,"line_end":2562,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188193,"byte_end":188231,"line_start":2563,"line_end":2563,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188236,"byte_end":188239,"line_start":2564,"line_end":2564,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188244,"byte_end":188258,"line_start":2565,"line_end":2565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188263,"byte_end":188266,"line_start":2566,"line_end":2566,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188271,"byte_end":188278,"line_start":2567,"line_end":2567,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188283,"byte_end":188329,"line_start":2568,"line_end":2568,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188334,"byte_end":188354,"line_start":2569,"line_end":2569,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188359,"byte_end":188362,"line_start":2570,"line_end":2570,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188367,"byte_end":188426,"line_start":2571,"line_end":2571,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188431,"byte_end":188486,"line_start":2572,"line_end":2572,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188491,"byte_end":188494,"line_start":2573,"line_end":2573,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188499,"byte_end":188551,"line_start":2574,"line_end":2574,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188556,"byte_end":188559,"line_start":2575,"line_end":2575,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188564,"byte_end":188619,"line_start":2576,"line_end":2576,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188624,"byte_end":188687,"line_start":2577,"line_end":2577,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188692,"byte_end":188770,"line_start":2578,"line_end":2578,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188775,"byte_end":188780,"line_start":2579,"line_end":2579,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188785,"byte_end":188788,"line_start":2580,"line_end":2580,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188793,"byte_end":188800,"line_start":2581,"line_end":2581,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":188841,"byte_end":188847,"line_start":2582,"line_end":2582,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190035,"byte_end":190046,"line_start":2617,"line_end":2617,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189124,"byte_end":189200,"line_start":2592,"line_end":2592,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189205,"byte_end":189208,"line_start":2593,"line_end":2593,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189213,"byte_end":189227,"line_start":2594,"line_end":2594,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189232,"byte_end":189235,"line_start":2595,"line_end":2595,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189240,"byte_end":189247,"line_start":2596,"line_end":2596,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189252,"byte_end":189298,"line_start":2597,"line_end":2597,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189303,"byte_end":189323,"line_start":2598,"line_end":2598,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189328,"byte_end":189331,"line_start":2599,"line_end":2599,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189336,"byte_end":189395,"line_start":2600,"line_end":2600,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189400,"byte_end":189456,"line_start":2601,"line_end":2601,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189461,"byte_end":189464,"line_start":2602,"line_end":2602,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189469,"byte_end":189519,"line_start":2603,"line_end":2603,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189524,"byte_end":189527,"line_start":2604,"line_end":2604,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189532,"byte_end":189577,"line_start":2605,"line_end":2605,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189582,"byte_end":189585,"line_start":2606,"line_end":2606,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189590,"byte_end":189680,"line_start":2607,"line_end":2607,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189685,"byte_end":189717,"line_start":2608,"line_end":2608,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189722,"byte_end":189788,"line_start":2609,"line_end":2609,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189793,"byte_end":189879,"line_start":2610,"line_end":2610,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189884,"byte_end":189920,"line_start":2611,"line_end":2611,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189925,"byte_end":189938,"line_start":2612,"line_end":2612,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189943,"byte_end":189952,"line_start":2613,"line_end":2613,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189957,"byte_end":189962,"line_start":2614,"line_end":2614,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":189967,"byte_end":189974,"line_start":2615,"line_end":2615,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190015,"byte_end":190021,"line_start":2616,"line_end":2616,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190613,"byte_end":190616,"line_start":2636,"line_end":2636,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190223,"byte_end":190296,"line_start":2624,"line_end":2624,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190301,"byte_end":190331,"line_start":2625,"line_end":2625,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190336,"byte_end":190339,"line_start":2626,"line_end":2626,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190344,"byte_end":190358,"line_start":2627,"line_end":2627,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190363,"byte_end":190366,"line_start":2628,"line_end":2628,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190371,"byte_end":190378,"line_start":2629,"line_end":2629,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190383,"byte_end":190410,"line_start":2630,"line_end":2630,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190415,"byte_end":190418,"line_start":2631,"line_end":2631,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190423,"byte_end":190476,"line_start":2632,"line_end":2632,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190481,"byte_end":190540,"line_start":2633,"line_end":2633,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190545,"byte_end":190552,"line_start":2634,"line_end":2634,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190593,"byte_end":190599,"line_start":2635,"line_end":2635,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191052,"byte_end":191060,"line_start":2655,"line_end":2655,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190661,"byte_end":190691,"line_start":2640,"line_end":2640,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190696,"byte_end":190699,"line_start":2641,"line_end":2641,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190704,"byte_end":190718,"line_start":2642,"line_end":2642,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190723,"byte_end":190726,"line_start":2643,"line_end":2643,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190731,"byte_end":190738,"line_start":2644,"line_end":2644,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190743,"byte_end":190770,"line_start":2645,"line_end":2645,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190775,"byte_end":190810,"line_start":2646,"line_end":2646,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190815,"byte_end":190818,"line_start":2647,"line_end":2647,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190823,"byte_end":190876,"line_start":2648,"line_end":2648,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190881,"byte_end":190884,"line_start":2649,"line_end":2649,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190889,"byte_end":190943,"line_start":2650,"line_end":2650,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190948,"byte_end":190969,"line_start":2651,"line_end":2651,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190974,"byte_end":190979,"line_start":2652,"line_end":2652,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190984,"byte_end":190991,"line_start":2653,"line_end":2653,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191032,"byte_end":191038,"line_start":2654,"line_end":2654,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191611,"byte_end":191617,"line_start":2676,"line_end":2676,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191102,"byte_end":191161,"line_start":2659,"line_end":2659,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191166,"byte_end":191208,"line_start":2660,"line_end":2660,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191213,"byte_end":191216,"line_start":2661,"line_end":2661,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191221,"byte_end":191235,"line_start":2662,"line_end":2662,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191240,"byte_end":191243,"line_start":2663,"line_end":2663,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191248,"byte_end":191255,"line_start":2664,"line_end":2664,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191260,"byte_end":191287,"line_start":2665,"line_end":2665,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191292,"byte_end":191327,"line_start":2666,"line_end":2666,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191332,"byte_end":191335,"line_start":2667,"line_end":2667,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191340,"byte_end":191393,"line_start":2668,"line_end":2668,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191398,"byte_end":191401,"line_start":2669,"line_end":2669,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191406,"byte_end":191460,"line_start":2670,"line_end":2670,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191465,"byte_end":191486,"line_start":2671,"line_end":2671,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191491,"byte_end":191496,"line_start":2672,"line_end":2672,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191501,"byte_end":191538,"line_start":2673,"line_end":2673,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191543,"byte_end":191550,"line_start":2674,"line_end":2674,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":191591,"byte_end":191597,"line_start":2675,"line_end":2675,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1475},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231198,"byte_end":231205,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1478}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":227804,"byte_end":227870,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":227871,"byte_end":227874,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":227875,"byte_end":227947,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":227948,"byte_end":228028,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228029,"byte_end":228105,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228106,"byte_end":228160,"line_start":23,"line_end":23,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228161,"byte_end":228164,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228165,"byte_end":228176,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228177,"byte_end":228213,"line_start":26,"line_end":26,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228214,"byte_end":228221,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228222,"byte_end":228225,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228226,"byte_end":228296,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228297,"byte_end":228300,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228301,"byte_end":228304,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228305,"byte_end":228378,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228379,"byte_end":228452,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228453,"byte_end":228528,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228529,"byte_end":228608,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228609,"byte_end":228625,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228626,"byte_end":228629,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228630,"byte_end":228709,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228710,"byte_end":228788,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228789,"byte_end":228869,"line_start":40,"line_end":40,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228870,"byte_end":228915,"line_start":41,"line_end":41,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228916,"byte_end":228919,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228920,"byte_end":228934,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228935,"byte_end":228938,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228939,"byte_end":228946,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228947,"byte_end":228974,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":228975,"byte_end":229043,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229044,"byte_end":229095,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229096,"byte_end":229131,"line_start":49,"line_end":49,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229132,"byte_end":229135,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229136,"byte_end":229158,"line_start":51,"line_end":51,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229159,"byte_end":229212,"line_start":52,"line_end":52,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229213,"byte_end":229267,"line_start":53,"line_end":53,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229268,"byte_end":229312,"line_start":54,"line_end":54,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229313,"byte_end":229362,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229363,"byte_end":229366,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229367,"byte_end":229399,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229400,"byte_end":229447,"line_start":58,"line_end":58,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229448,"byte_end":229520,"line_start":59,"line_end":59,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229521,"byte_end":229551,"line_start":60,"line_end":60,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229552,"byte_end":229557,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229558,"byte_end":229561,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229562,"byte_end":229583,"line_start":63,"line_end":63,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229584,"byte_end":229616,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229617,"byte_end":229620,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229621,"byte_end":229652,"line_start":66,"line_end":66,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229653,"byte_end":229677,"line_start":67,"line_end":67,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229678,"byte_end":229707,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229708,"byte_end":229713,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229714,"byte_end":229721,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229722,"byte_end":229725,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229726,"byte_end":229794,"line_start":72,"line_end":72,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`], this will in the","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229795,"byte_end":229871,"line_start":73,"line_end":73,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229872,"byte_end":229904,"line_start":74,"line_end":74,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229905,"byte_end":229908,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229909,"byte_end":229916,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229917,"byte_end":229944,"line_start":77,"line_end":77,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229945,"byte_end":229986,"line_start":78,"line_end":78,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":229987,"byte_end":230006,"line_start":79,"line_end":79,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230007,"byte_end":230028,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230029,"byte_end":230050,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230051,"byte_end":230056,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230057,"byte_end":230060,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230061,"byte_end":230098,"line_start":84,"line_end":84,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230099,"byte_end":230102,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230103,"byte_end":230170,"line_start":86,"line_end":86,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230171,"byte_end":230238,"line_start":87,"line_end":87,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230239,"byte_end":230305,"line_start":88,"line_end":88,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230306,"byte_end":230374,"line_start":89,"line_end":89,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230375,"byte_end":230378,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230379,"byte_end":230434,"line_start":91,"line_end":91,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230435,"byte_end":230458,"line_start":92,"line_end":92,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230459,"byte_end":230487,"line_start":93,"line_end":93,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230488,"byte_end":230493,"line_start":94,"line_end":94,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230494,"byte_end":230501,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230502,"byte_end":230505,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230506,"byte_end":230583,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230584,"byte_end":230587,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230588,"byte_end":230595,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230596,"byte_end":230623,"line_start":100,"line_end":100,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230624,"byte_end":230627,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230628,"byte_end":230643,"line_start":102,"line_end":102,"column_start":1,"column_end":16}},{"value":"/ let viking_names: HashSet<&'static str> =","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230644,"byte_end":230689,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/     [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230690,"byte_end":230754,"line_start":104,"line_end":104,"column_start":1,"column_end":65}},{"value":"/ // use the values stored in the set","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230755,"byte_end":230794,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230795,"byte_end":230800,"line_start":106,"line_end":106,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230801,"byte_end":230808,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230809,"byte_end":230812,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230813,"byte_end":230878,"line_start":109,"line_end":109,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230879,"byte_end":230938,"line_start":110,"line_end":110,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":230939,"byte_end":231003,"line_start":111,"line_end":111,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231004,"byte_end":231040,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231041,"byte_end":231114,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231115,"byte_end":231186,"line_start":114,"line_end":114,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231975,"byte_end":231978,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<HashSet<T, DefaultHashBuilder>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231607,"byte_end":231638,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231643,"byte_end":231646,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ The hash set is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231651,"byte_end":231743,"line_start":135,"line_end":135,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231748,"byte_end":231775,"line_start":136,"line_end":136,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231780,"byte_end":231783,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231788,"byte_end":231802,"line_start":138,"line_end":138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231807,"byte_end":231810,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231815,"byte_end":231822,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231827,"byte_end":231854,"line_start":141,"line_end":141,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231859,"byte_end":231902,"line_start":142,"line_end":142,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231907,"byte_end":231914,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231955,"byte_end":231961,"line_start":144,"line_end":144,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232531,"byte_end":232544,"line_start":164,"line_end":164,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashSet<T, DefaultHashBuilder>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232060,"byte_end":232119,"line_start":151,"line_end":151,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232124,"byte_end":232127,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232132,"byte_end":232206,"line_start":153,"line_end":153,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232211,"byte_end":232280,"line_start":154,"line_end":154,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232285,"byte_end":232288,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232293,"byte_end":232307,"line_start":156,"line_end":156,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232312,"byte_end":232315,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232320,"byte_end":232327,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232332,"byte_end":232359,"line_start":159,"line_end":159,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232364,"byte_end":232419,"line_start":160,"line_end":160,"column_start":5,"column_end":60}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232424,"byte_end":232458,"line_start":161,"line_end":161,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232463,"byte_end":232470,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232511,"byte_end":232517,"line_start":163,"line_end":163,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233014,"byte_end":233022,"line_start":182,"line_end":182,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232688,"byte_end":232761,"line_start":172,"line_end":172,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232766,"byte_end":232769,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232774,"byte_end":232788,"line_start":174,"line_end":174,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232793,"byte_end":232796,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232801,"byte_end":232808,"line_start":176,"line_end":176,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232813,"byte_end":232840,"line_start":177,"line_end":177,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232845,"byte_end":232901,"line_start":178,"line_end":178,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232906,"byte_end":232941,"line_start":179,"line_end":179,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232946,"byte_end":232953,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232994,"byte_end":233000,"line_start":181,"line_end":181,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233547,"byte_end":233551,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233080,"byte_end":233137,"line_start":186,"line_end":186,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233142,"byte_end":233183,"line_start":187,"line_end":187,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233188,"byte_end":233191,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233196,"byte_end":233210,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233215,"byte_end":233218,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233223,"byte_end":233230,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233235,"byte_end":233262,"line_start":192,"line_end":192,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233267,"byte_end":233300,"line_start":193,"line_end":193,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233305,"byte_end":233325,"line_start":194,"line_end":194,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233330,"byte_end":233350,"line_start":195,"line_end":195,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233355,"byte_end":233358,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233363,"byte_end":233403,"line_start":197,"line_end":197,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233408,"byte_end":233433,"line_start":198,"line_end":198,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233438,"byte_end":233464,"line_start":199,"line_end":199,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233469,"byte_end":233474,"line_start":200,"line_end":200,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233479,"byte_end":233486,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233527,"byte_end":233533,"line_start":202,"line_end":202,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233974,"byte_end":233977,"line_start":222,"line_end":222,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233647,"byte_end":233693,"line_start":209,"line_end":209,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233698,"byte_end":233701,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233706,"byte_end":233720,"line_start":211,"line_end":211,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233725,"byte_end":233728,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233733,"byte_end":233740,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233745,"byte_end":233772,"line_start":214,"line_end":214,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233777,"byte_end":233780,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233785,"byte_end":233816,"line_start":216,"line_end":216,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233821,"byte_end":233848,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233853,"byte_end":233869,"line_start":218,"line_end":218,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233874,"byte_end":233901,"line_start":219,"line_end":219,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233906,"byte_end":233913,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":233954,"byte_end":233960,"line_start":221,"line_end":221,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234361,"byte_end":234369,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234030,"byte_end":234081,"line_start":226,"line_end":226,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234086,"byte_end":234089,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234094,"byte_end":234108,"line_start":228,"line_end":228,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234113,"byte_end":234116,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234121,"byte_end":234128,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234133,"byte_end":234160,"line_start":231,"line_end":231,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234165,"byte_end":234168,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234173,"byte_end":234204,"line_start":233,"line_end":233,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234209,"byte_end":234235,"line_start":234,"line_end":234,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234240,"byte_end":234256,"line_start":235,"line_end":235,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234261,"byte_end":234288,"line_start":236,"line_end":236,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234293,"byte_end":234300,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234341,"byte_end":234347,"line_start":238,"line_end":238,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234917,"byte_end":234922,"line_start":261,"line_end":261,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S>>::drain","value":"fn (&mut self) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234426,"byte_end":234484,"line_start":243,"line_end":243,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234489,"byte_end":234492,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234497,"byte_end":234511,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234516,"byte_end":234519,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234524,"byte_end":234531,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234536,"byte_end":234563,"line_start":248,"line_end":248,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234568,"byte_end":234571,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234576,"byte_end":234642,"line_start":250,"line_end":250,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234647,"byte_end":234676,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234681,"byte_end":234684,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234689,"byte_end":234731,"line_start":253,"line_end":253,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234736,"byte_end":234762,"line_start":254,"line_end":254,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234767,"byte_end":234793,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234798,"byte_end":234803,"line_start":256,"line_end":256,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234808,"byte_end":234811,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234816,"byte_end":234844,"line_start":258,"line_end":258,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234849,"byte_end":234856,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":234897,"byte_end":234903,"line_start":260,"line_end":260,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235453,"byte_end":235459,"line_start":281,"line_end":281,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235025,"byte_end":235082,"line_start":267,"line_end":267,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235087,"byte_end":235090,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235095,"byte_end":235173,"line_start":269,"line_end":269,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235178,"byte_end":235181,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235186,"byte_end":235200,"line_start":271,"line_end":271,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235205,"byte_end":235208,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235213,"byte_end":235220,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235225,"byte_end":235252,"line_start":274,"line_end":274,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235257,"byte_end":235260,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235265,"byte_end":235292,"line_start":276,"line_end":276,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235297,"byte_end":235358,"line_start":277,"line_end":277,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235363,"byte_end":235395,"line_start":278,"line_end":278,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235400,"byte_end":235429,"line_start":279,"line_end":279,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235434,"byte_end":235441,"line_start":280,"line_end":280,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235886,"byte_end":235891,"line_start":301,"line_end":301,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235579,"byte_end":235619,"line_start":288,"line_end":288,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235624,"byte_end":235627,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235632,"byte_end":235646,"line_start":290,"line_end":290,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235651,"byte_end":235654,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235659,"byte_end":235666,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235671,"byte_end":235698,"line_start":293,"line_end":293,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235703,"byte_end":235706,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235711,"byte_end":235742,"line_start":295,"line_end":295,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235747,"byte_end":235763,"line_start":296,"line_end":296,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235768,"byte_end":235782,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235787,"byte_end":235813,"line_start":298,"line_end":298,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235818,"byte_end":235825,"line_start":299,"line_end":299,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235866,"byte_end":235872,"line_start":300,"line_end":300,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237026,"byte_end":237037,"line_start":338,"line_end":338,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashSet<T, S>>::with_hasher","value":"fn (hasher: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236014,"byte_end":236086,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236091,"byte_end":236100,"line_start":312,"line_end":312,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236105,"byte_end":236108,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236113,"byte_end":236180,"line_start":314,"line_end":314,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236185,"byte_end":236188,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236193,"byte_end":236250,"line_start":316,"line_end":316,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236255,"byte_end":236322,"line_start":317,"line_end":317,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236327,"byte_end":236390,"line_start":318,"line_end":318,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236395,"byte_end":236459,"line_start":319,"line_end":319,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236464,"byte_end":236467,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236472,"byte_end":236548,"line_start":321,"line_end":321,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236553,"byte_end":236617,"line_start":322,"line_end":322,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236622,"byte_end":236625,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236630,"byte_end":236633,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236638,"byte_end":236652,"line_start":325,"line_end":325,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236657,"byte_end":236660,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236665,"byte_end":236672,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236677,"byte_end":236704,"line_start":328,"line_end":328,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236709,"byte_end":236757,"line_start":329,"line_end":329,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236762,"byte_end":236765,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236770,"byte_end":236812,"line_start":331,"line_end":331,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236817,"byte_end":236859,"line_start":332,"line_end":332,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236864,"byte_end":236882,"line_start":333,"line_end":333,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236887,"byte_end":236894,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236899,"byte_end":236902,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":236907,"byte_end":236965,"line_start":336,"line_end":336,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237006,"byte_end":237012,"line_start":337,"line_end":337,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238258,"byte_end":238282,"line_start":371,"line_end":371,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S>>::with_capacity_and_hasher","value":"fn (capacity: usize, hasher: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237142,"byte_end":237207,"line_start":344,"line_end":344,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237212,"byte_end":237242,"line_start":345,"line_end":345,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237247,"byte_end":237250,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237255,"byte_end":237329,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237334,"byte_end":237403,"line_start":348,"line_end":348,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237408,"byte_end":237411,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237416,"byte_end":237473,"line_start":350,"line_end":350,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237478,"byte_end":237545,"line_start":351,"line_end":351,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237550,"byte_end":237613,"line_start":352,"line_end":352,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237618,"byte_end":237682,"line_start":353,"line_end":353,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237687,"byte_end":237690,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237695,"byte_end":237771,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237776,"byte_end":237840,"line_start":356,"line_end":356,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237845,"byte_end":237848,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237853,"byte_end":237867,"line_start":358,"line_end":358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237872,"byte_end":237875,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237880,"byte_end":237887,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237892,"byte_end":237919,"line_start":361,"line_end":361,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237924,"byte_end":237972,"line_start":362,"line_end":362,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237977,"byte_end":237980,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":237985,"byte_end":238027,"line_start":364,"line_end":364,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238032,"byte_end":238091,"line_start":365,"line_end":365,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238096,"byte_end":238114,"line_start":366,"line_end":366,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238119,"byte_end":238126,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238131,"byte_end":238134,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238139,"byte_end":238197,"line_start":369,"line_end":369,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238238,"byte_end":238244,"line_start":370,"line_end":370,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238954,"byte_end":238960,"line_start":392,"line_end":392,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238427,"byte_end":238480,"line_start":377,"line_end":377,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238485,"byte_end":238488,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238493,"byte_end":238571,"line_start":379,"line_end":379,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238576,"byte_end":238579,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238584,"byte_end":238598,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238603,"byte_end":238606,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238611,"byte_end":238618,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238623,"byte_end":238650,"line_start":384,"line_end":384,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238655,"byte_end":238703,"line_start":385,"line_end":385,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238708,"byte_end":238711,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238716,"byte_end":238763,"line_start":387,"line_end":387,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238768,"byte_end":238825,"line_start":388,"line_end":388,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238830,"byte_end":238881,"line_start":389,"line_end":389,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238886,"byte_end":238893,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":238934,"byte_end":238940,"line_start":391,"line_end":391,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239556,"byte_end":239563,"line_start":413,"line_end":413,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239013,"byte_end":239089,"line_start":396,"line_end":396,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239094,"byte_end":239162,"line_start":397,"line_end":397,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239167,"byte_end":239194,"line_start":398,"line_end":398,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239199,"byte_end":239202,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239207,"byte_end":239219,"line_start":400,"line_end":400,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239224,"byte_end":239227,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239232,"byte_end":239288,"line_start":402,"line_end":402,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239293,"byte_end":239296,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239301,"byte_end":239315,"line_start":404,"line_end":404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239320,"byte_end":239323,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239328,"byte_end":239335,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239340,"byte_end":239367,"line_start":407,"line_end":407,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239372,"byte_end":239419,"line_start":408,"line_end":408,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239424,"byte_end":239444,"line_start":409,"line_end":409,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239449,"byte_end":239483,"line_start":410,"line_end":410,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239488,"byte_end":239495,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239536,"byte_end":239542,"line_start":412,"line_end":412,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240270,"byte_end":240281,"line_start":434,"line_end":434,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239644,"byte_end":239728,"line_start":417,"line_end":417,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239733,"byte_end":239812,"line_start":418,"line_end":418,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239817,"byte_end":239844,"line_start":419,"line_end":419,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239849,"byte_end":239852,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239857,"byte_end":239869,"line_start":421,"line_end":421,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239874,"byte_end":239877,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239882,"byte_end":239962,"line_start":423,"line_end":423,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239967,"byte_end":239983,"line_start":424,"line_end":424,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239988,"byte_end":239991,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":239996,"byte_end":240010,"line_start":426,"line_end":426,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240015,"byte_end":240018,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240023,"byte_end":240030,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240035,"byte_end":240062,"line_start":429,"line_end":429,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240067,"byte_end":240114,"line_start":430,"line_end":430,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240119,"byte_end":240197,"line_start":431,"line_end":431,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240202,"byte_end":240209,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240250,"byte_end":240256,"line_start":433,"line_end":433,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240978,"byte_end":240991,"line_start":455,"line_end":455,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240397,"byte_end":240466,"line_start":438,"line_end":438,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240471,"byte_end":240536,"line_start":439,"line_end":439,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240541,"byte_end":240614,"line_start":440,"line_end":440,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240619,"byte_end":240622,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240627,"byte_end":240641,"line_start":442,"line_end":442,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240646,"byte_end":240649,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240654,"byte_end":240661,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240666,"byte_end":240693,"line_start":445,"line_end":445,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240698,"byte_end":240701,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240706,"byte_end":240752,"line_start":447,"line_end":447,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240757,"byte_end":240775,"line_start":448,"line_end":448,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240780,"byte_end":240798,"line_start":449,"line_end":449,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240803,"byte_end":240838,"line_start":450,"line_end":450,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240843,"byte_end":240867,"line_start":451,"line_end":451,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240872,"byte_end":240905,"line_start":452,"line_end":452,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240910,"byte_end":240917,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":240958,"byte_end":240964,"line_start":454,"line_end":454,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241807,"byte_end":241816,"line_start":481,"line_end":481,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241049,"byte_end":241117,"line_start":459,"line_end":459,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241122,"byte_end":241200,"line_start":460,"line_end":460,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241205,"byte_end":241278,"line_start":461,"line_end":461,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241283,"byte_end":241286,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241291,"byte_end":241354,"line_start":463,"line_end":463,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241359,"byte_end":241380,"line_start":464,"line_end":464,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241385,"byte_end":241388,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241393,"byte_end":241407,"line_start":466,"line_end":466,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241412,"byte_end":241415,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241420,"byte_end":241427,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241432,"byte_end":241459,"line_start":469,"line_end":469,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241464,"byte_end":241467,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241472,"byte_end":241518,"line_start":471,"line_end":471,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241523,"byte_end":241541,"line_start":472,"line_end":472,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241546,"byte_end":241564,"line_start":473,"line_end":473,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241569,"byte_end":241604,"line_start":474,"line_end":474,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241609,"byte_end":241631,"line_start":475,"line_end":475,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241636,"byte_end":241670,"line_start":476,"line_end":476,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241675,"byte_end":241696,"line_start":477,"line_end":477,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241701,"byte_end":241734,"line_start":478,"line_end":478,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241739,"byte_end":241746,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241787,"byte_end":241793,"line_start":480,"line_end":480,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242758,"byte_end":242768,"line_start":509,"line_end":509,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S>>::difference","value":"fn <'a> (&'a self, other: &'a Self) -> Difference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241903,"byte_end":241953,"line_start":485,"line_end":485,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":241958,"byte_end":242017,"line_start":486,"line_end":486,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242022,"byte_end":242025,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242030,"byte_end":242044,"line_start":488,"line_end":488,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242049,"byte_end":242052,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242057,"byte_end":242064,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242069,"byte_end":242096,"line_start":491,"line_end":491,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242101,"byte_end":242161,"line_start":492,"line_end":492,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242166,"byte_end":242229,"line_start":493,"line_end":493,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242234,"byte_end":242237,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242242,"byte_end":242272,"line_start":495,"line_end":495,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242277,"byte_end":242308,"line_start":496,"line_end":496,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242313,"byte_end":242350,"line_start":497,"line_end":497,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242355,"byte_end":242360,"line_start":498,"line_end":498,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242365,"byte_end":242368,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242373,"byte_end":242427,"line_start":500,"line_end":500,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242432,"byte_end":242475,"line_start":501,"line_end":501,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242480,"byte_end":242483,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242488,"byte_end":242533,"line_start":503,"line_end":503,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242538,"byte_end":242578,"line_start":504,"line_end":504,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242583,"byte_end":242637,"line_start":505,"line_end":505,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242642,"byte_end":242685,"line_start":506,"line_end":506,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242690,"byte_end":242697,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242738,"byte_end":242744,"line_start":508,"line_end":508,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243717,"byte_end":243737,"line_start":538,"line_end":538,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S>>::symmetric_difference","value":"fn <'a> (&'a self, other: &'a Self) -> SymmetricDifference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242918,"byte_end":242978,"line_start":516,"line_end":516,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":242983,"byte_end":243053,"line_start":517,"line_end":517,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243058,"byte_end":243061,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243066,"byte_end":243080,"line_start":519,"line_end":519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243085,"byte_end":243088,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243093,"byte_end":243100,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243105,"byte_end":243132,"line_start":522,"line_end":522,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243137,"byte_end":243197,"line_start":523,"line_end":523,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243202,"byte_end":243265,"line_start":524,"line_end":524,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243270,"byte_end":243273,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243278,"byte_end":243315,"line_start":526,"line_end":526,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243320,"byte_end":243361,"line_start":527,"line_end":527,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243366,"byte_end":243392,"line_start":528,"line_end":528,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243397,"byte_end":243402,"line_start":529,"line_end":529,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243407,"byte_end":243410,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243415,"byte_end":243480,"line_start":531,"line_end":531,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243485,"byte_end":243550,"line_start":532,"line_end":532,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243555,"byte_end":243558,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243563,"byte_end":243592,"line_start":534,"line_end":534,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243597,"byte_end":243644,"line_start":535,"line_end":535,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243649,"byte_end":243656,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243697,"byte_end":243703,"line_start":537,"line_end":537,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244591,"byte_end":244603,"line_start":563,"line_end":563,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S>>::intersection","value":"fn <'a> (&'a self, other: &'a Self) -> Intersection<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243927,"byte_end":243979,"line_start":544,"line_end":544,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":243984,"byte_end":244041,"line_start":545,"line_end":545,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244046,"byte_end":244049,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244054,"byte_end":244068,"line_start":547,"line_end":547,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244073,"byte_end":244076,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244081,"byte_end":244088,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244093,"byte_end":244120,"line_start":550,"line_end":550,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244125,"byte_end":244185,"line_start":551,"line_end":551,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244190,"byte_end":244253,"line_start":552,"line_end":552,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244258,"byte_end":244261,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244266,"byte_end":244303,"line_start":554,"line_end":554,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244308,"byte_end":244341,"line_start":555,"line_end":555,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244346,"byte_end":244372,"line_start":556,"line_end":556,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244377,"byte_end":244382,"line_start":557,"line_end":557,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244387,"byte_end":244390,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244395,"byte_end":244459,"line_start":559,"line_end":559,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244464,"byte_end":244518,"line_start":560,"line_end":560,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244523,"byte_end":244530,"line_start":561,"line_end":561,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244571,"byte_end":244577,"line_start":562,"line_end":562,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245561,"byte_end":245566,"line_start":594,"line_end":594,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S>>::union","value":"fn <'a> (&'a self, other: &'a Self) -> Union<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244911,"byte_end":244956,"line_start":575,"line_end":575,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":244961,"byte_end":245027,"line_start":576,"line_end":576,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245032,"byte_end":245035,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245040,"byte_end":245054,"line_start":578,"line_end":578,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245059,"byte_end":245062,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245067,"byte_end":245074,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245079,"byte_end":245106,"line_start":581,"line_end":581,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245111,"byte_end":245171,"line_start":582,"line_end":582,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245176,"byte_end":245239,"line_start":583,"line_end":583,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245244,"byte_end":245247,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245252,"byte_end":245295,"line_start":585,"line_end":585,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245300,"byte_end":245326,"line_start":586,"line_end":586,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245331,"byte_end":245357,"line_start":587,"line_end":587,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245362,"byte_end":245367,"line_start":588,"line_end":588,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245372,"byte_end":245375,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245380,"byte_end":245430,"line_start":590,"line_end":590,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245435,"byte_end":245488,"line_start":591,"line_end":591,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245493,"byte_end":245500,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245541,"byte_end":245547,"line_start":593,"line_end":593,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246546,"byte_end":246554,"line_start":624,"line_end":624,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245866,"byte_end":245913,"line_start":605,"line_end":605,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245918,"byte_end":245921,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245926,"byte_end":245993,"line_start":607,"line_end":607,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":245998,"byte_end":246065,"line_start":608,"line_end":608,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246070,"byte_end":246089,"line_start":609,"line_end":609,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246094,"byte_end":246097,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246102,"byte_end":246116,"line_start":611,"line_end":611,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246121,"byte_end":246124,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246129,"byte_end":246136,"line_start":613,"line_end":613,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246141,"byte_end":246168,"line_start":614,"line_end":614,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246173,"byte_end":246176,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246181,"byte_end":246243,"line_start":616,"line_end":616,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246248,"byte_end":246287,"line_start":617,"line_end":617,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246292,"byte_end":246332,"line_start":618,"line_end":618,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246337,"byte_end":246344,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246349,"byte_end":246352,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246357,"byte_end":246416,"line_start":621,"line_end":621,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246421,"byte_end":246485,"line_start":622,"line_end":622,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246526,"byte_end":246532,"line_start":623,"line_end":623,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247416,"byte_end":247419,"line_start":651,"line_end":651,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S>>::get","value":"fn <Q> (&self, value: &Q) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246700,"byte_end":246790,"line_start":632,"line_end":632,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246795,"byte_end":246798,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246803,"byte_end":246870,"line_start":634,"line_end":634,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246875,"byte_end":246942,"line_start":635,"line_end":635,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246947,"byte_end":246966,"line_start":636,"line_end":636,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246971,"byte_end":246974,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246979,"byte_end":246993,"line_start":638,"line_end":638,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":246998,"byte_end":247001,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247006,"byte_end":247013,"line_start":640,"line_end":640,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247018,"byte_end":247045,"line_start":641,"line_end":641,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247050,"byte_end":247053,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247058,"byte_end":247120,"line_start":643,"line_end":643,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247125,"byte_end":247163,"line_start":644,"line_end":644,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247168,"byte_end":247202,"line_start":645,"line_end":645,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247207,"byte_end":247214,"line_start":646,"line_end":646,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247219,"byte_end":247222,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247227,"byte_end":247286,"line_start":648,"line_end":648,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247291,"byte_end":247355,"line_start":649,"line_end":649,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247396,"byte_end":247402,"line_start":650,"line_end":650,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248125,"byte_end":248138,"line_start":674,"line_end":674,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<HashSet<T, S>>::get_or_insert","value":"fn (&mut self, value: T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given `value` into the set if it is not present, then\n returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts the given `value` into the set if it is not present, then","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247588,"byte_end":247657,"line_start":659,"line_end":659,"column_start":5,"column_end":74}},{"value":"/ returns a reference to the value in the set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247662,"byte_end":247710,"line_start":660,"line_end":660,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247715,"byte_end":247718,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247723,"byte_end":247737,"line_start":662,"line_end":662,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247742,"byte_end":247745,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247750,"byte_end":247757,"line_start":664,"line_end":664,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247762,"byte_end":247789,"line_start":665,"line_end":665,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247794,"byte_end":247797,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247802,"byte_end":247868,"line_start":667,"line_end":667,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247873,"byte_end":247902,"line_start":668,"line_end":668,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(set.get_or_insert(2), &2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247907,"byte_end":247948,"line_start":669,"line_end":669,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(set.get_or_insert(100), &100);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":247953,"byte_end":247998,"line_start":670,"line_end":670,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.len(), 4); // 100 was inserted","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248003,"byte_end":248052,"line_start":671,"line_end":671,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248057,"byte_end":248064,"line_start":672,"line_end":672,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248105,"byte_end":248111,"line_start":673,"line_end":673,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249129,"byte_end":249148,"line_start":703,"line_end":703,"column_start":12,"column_end":31},"name":"get_or_insert_owned","qualname":"<HashSet<T, S>>::get_or_insert_owned","value":"fn <Q> (&mut self, value: &Q) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts an owned copy of the given `value` into the set if it is not\n present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts an owned copy of the given `value` into the set if it is not","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248493,"byte_end":248565,"line_start":684,"line_end":684,"column_start":5,"column_end":77}},{"value":"/ present, then returns a reference to the value in the set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248570,"byte_end":248632,"line_start":685,"line_end":685,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248637,"byte_end":248640,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248645,"byte_end":248659,"line_start":687,"line_end":687,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248664,"byte_end":248667,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248672,"byte_end":248679,"line_start":689,"line_end":689,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248684,"byte_end":248711,"line_start":690,"line_end":690,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248716,"byte_end":248719,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248724,"byte_end":248782,"line_start":692,"line_end":692,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248787,"byte_end":248840,"line_start":693,"line_end":693,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248845,"byte_end":248848,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248853,"byte_end":248882,"line_start":695,"line_end":695,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248887,"byte_end":248928,"line_start":696,"line_end":696,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_owned(pet);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248933,"byte_end":248982,"line_start":697,"line_end":697,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":248987,"byte_end":249018,"line_start":698,"line_end":698,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249023,"byte_end":249028,"line_start":699,"line_end":699,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249033,"byte_end":249091,"line_start":700,"line_end":700,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249096,"byte_end":249103,"line_start":701,"line_end":701,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249108,"byte_end":249117,"line_start":702,"line_end":702,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250305,"byte_end":250323,"line_start":736,"line_end":736,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<HashSet<T, S>>::get_or_insert_with","value":"fn <Q, F> (&mut self, value: &Q, f: F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a value computed from `f` into the set if the given `value` is\n not present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts a value computed from `f` into the set if the given `value` is","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249614,"byte_end":249688,"line_start":717,"line_end":717,"column_start":5,"column_end":79}},{"value":"/ not present, then returns a reference to the value in the set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249693,"byte_end":249759,"line_start":718,"line_end":718,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249764,"byte_end":249767,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249772,"byte_end":249786,"line_start":720,"line_end":720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249791,"byte_end":249794,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249799,"byte_end":249806,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249811,"byte_end":249838,"line_start":723,"line_end":723,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249843,"byte_end":249846,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249851,"byte_end":249909,"line_start":725,"line_end":725,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249914,"byte_end":249967,"line_start":726,"line_end":726,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249972,"byte_end":249975,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":249980,"byte_end":250009,"line_start":728,"line_end":728,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250014,"byte_end":250055,"line_start":729,"line_end":729,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_with(pet, str::to_owned);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250060,"byte_end":250123,"line_start":730,"line_end":730,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250128,"byte_end":250159,"line_start":731,"line_end":731,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250164,"byte_end":250169,"line_start":732,"line_end":732,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250174,"byte_end":250232,"line_start":733,"line_end":733,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250237,"byte_end":250244,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250285,"byte_end":250291,"line_start":735,"line_end":735,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251329,"byte_end":251340,"line_start":768,"line_end":768,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S>>::is_disjoint","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250797,"byte_end":250865,"line_start":751,"line_end":751,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250870,"byte_end":250931,"line_start":752,"line_end":752,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250936,"byte_end":250939,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250944,"byte_end":250958,"line_start":754,"line_end":754,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250963,"byte_end":250966,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250971,"byte_end":250978,"line_start":756,"line_end":756,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":250983,"byte_end":251010,"line_start":757,"line_end":757,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251015,"byte_end":251018,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251023,"byte_end":251083,"line_start":759,"line_end":759,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251088,"byte_end":251119,"line_start":760,"line_end":760,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251124,"byte_end":251127,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251132,"byte_end":251172,"line_start":762,"line_end":762,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251177,"byte_end":251193,"line_start":763,"line_end":763,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251198,"byte_end":251238,"line_start":764,"line_end":764,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251243,"byte_end":251259,"line_start":765,"line_end":765,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251264,"byte_end":251305,"line_start":766,"line_end":766,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251310,"byte_end":251317,"line_start":767,"line_end":767,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251962,"byte_end":251971,"line_start":789,"line_end":789,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S>>::is_subset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251431,"byte_end":251484,"line_start":772,"line_end":772,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251489,"byte_end":251550,"line_start":773,"line_end":773,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251555,"byte_end":251558,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251563,"byte_end":251577,"line_start":775,"line_end":775,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251582,"byte_end":251585,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251590,"byte_end":251597,"line_start":777,"line_end":777,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251602,"byte_end":251629,"line_start":778,"line_end":778,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251634,"byte_end":251637,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251642,"byte_end":251704,"line_start":780,"line_end":780,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251709,"byte_end":251742,"line_start":781,"line_end":781,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251747,"byte_end":251750,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251755,"byte_end":251797,"line_start":783,"line_end":783,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251802,"byte_end":251820,"line_start":784,"line_end":784,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251825,"byte_end":251867,"line_start":785,"line_end":785,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251872,"byte_end":251890,"line_start":786,"line_end":786,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251895,"byte_end":251938,"line_start":787,"line_end":787,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":251943,"byte_end":251950,"line_start":788,"line_end":788,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252715,"byte_end":252726,"line_start":814,"line_end":814,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S>>::is_superset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252090,"byte_end":252145,"line_start":793,"line_end":793,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252150,"byte_end":252211,"line_start":794,"line_end":794,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252216,"byte_end":252219,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252224,"byte_end":252238,"line_start":796,"line_end":796,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252243,"byte_end":252246,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252251,"byte_end":252258,"line_start":798,"line_end":798,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252263,"byte_end":252290,"line_start":799,"line_end":799,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252295,"byte_end":252298,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252303,"byte_end":252362,"line_start":801,"line_end":801,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252367,"byte_end":252400,"line_start":802,"line_end":802,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252405,"byte_end":252408,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252413,"byte_end":252458,"line_start":804,"line_end":804,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252463,"byte_end":252466,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252471,"byte_end":252489,"line_start":806,"line_end":806,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252494,"byte_end":252512,"line_start":807,"line_end":807,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252517,"byte_end":252562,"line_start":808,"line_end":808,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252567,"byte_end":252570,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252575,"byte_end":252593,"line_start":810,"line_end":810,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252598,"byte_end":252642,"line_start":811,"line_end":811,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252647,"byte_end":252654,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252695,"byte_end":252701,"line_start":813,"line_end":813,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253307,"byte_end":253313,"line_start":836,"line_end":836,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252799,"byte_end":252827,"line_start":818,"line_end":818,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252832,"byte_end":252835,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252840,"byte_end":252907,"line_start":820,"line_end":820,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252912,"byte_end":252915,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252920,"byte_end":252984,"line_start":822,"line_end":822,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252989,"byte_end":252992,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":252997,"byte_end":253011,"line_start":824,"line_end":824,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253016,"byte_end":253019,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253024,"byte_end":253031,"line_start":826,"line_end":826,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253036,"byte_end":253063,"line_start":827,"line_end":827,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253068,"byte_end":253071,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253076,"byte_end":253109,"line_start":829,"line_end":829,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253114,"byte_end":253117,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253122,"byte_end":253158,"line_start":831,"line_end":831,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253163,"byte_end":253200,"line_start":832,"line_end":832,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253205,"byte_end":253234,"line_start":833,"line_end":833,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253239,"byte_end":253246,"line_start":834,"line_end":834,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253287,"byte_end":253293,"line_start":835,"line_end":835,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253948,"byte_end":253955,"line_start":856,"line_end":856,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253401,"byte_end":253494,"line_start":840,"line_end":840,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253499,"byte_end":253535,"line_start":841,"line_end":841,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253540,"byte_end":253543,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253548,"byte_end":253562,"line_start":843,"line_end":843,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253567,"byte_end":253570,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253575,"byte_end":253582,"line_start":845,"line_end":845,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253587,"byte_end":253614,"line_start":846,"line_end":846,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253619,"byte_end":253622,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253627,"byte_end":253660,"line_start":848,"line_end":848,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253665,"byte_end":253699,"line_start":849,"line_end":849,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253704,"byte_end":253707,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253712,"byte_end":253768,"line_start":851,"line_end":851,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253773,"byte_end":253813,"line_start":852,"line_end":852,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253818,"byte_end":253875,"line_start":853,"line_end":853,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253880,"byte_end":253887,"line_start":854,"line_end":854,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":253928,"byte_end":253934,"line_start":855,"line_end":855,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254963,"byte_end":254969,"line_start":888,"line_end":888,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254241,"byte_end":254304,"line_start":866,"line_end":866,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254309,"byte_end":254332,"line_start":867,"line_end":867,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254337,"byte_end":254340,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254345,"byte_end":254412,"line_start":869,"line_end":869,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254417,"byte_end":254484,"line_start":870,"line_end":870,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254489,"byte_end":254508,"line_start":871,"line_end":871,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254513,"byte_end":254516,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254521,"byte_end":254535,"line_start":873,"line_end":873,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254540,"byte_end":254543,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254548,"byte_end":254555,"line_start":875,"line_end":875,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254560,"byte_end":254587,"line_start":876,"line_end":876,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254592,"byte_end":254595,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254600,"byte_end":254633,"line_start":878,"line_end":878,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254638,"byte_end":254641,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254646,"byte_end":254664,"line_start":880,"line_end":880,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254669,"byte_end":254706,"line_start":881,"line_end":881,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254711,"byte_end":254749,"line_start":882,"line_end":882,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254754,"byte_end":254761,"line_start":883,"line_end":883,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254766,"byte_end":254769,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254774,"byte_end":254833,"line_start":885,"line_end":885,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254838,"byte_end":254902,"line_start":886,"line_end":886,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":254943,"byte_end":254949,"line_start":887,"line_end":887,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255839,"byte_end":255843,"line_start":915,"line_end":915,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S>>::take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255123,"byte_end":255208,"line_start":896,"line_end":896,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255213,"byte_end":255216,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255221,"byte_end":255288,"line_start":898,"line_end":898,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255293,"byte_end":255360,"line_start":899,"line_end":899,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255365,"byte_end":255384,"line_start":900,"line_end":900,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255389,"byte_end":255392,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255397,"byte_end":255411,"line_start":902,"line_end":902,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255416,"byte_end":255419,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255424,"byte_end":255431,"line_start":904,"line_end":904,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255436,"byte_end":255463,"line_start":905,"line_end":905,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255468,"byte_end":255471,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255476,"byte_end":255542,"line_start":907,"line_end":907,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255547,"byte_end":255585,"line_start":908,"line_end":908,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255590,"byte_end":255625,"line_start":909,"line_end":909,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255630,"byte_end":255637,"line_start":910,"line_end":910,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255642,"byte_end":255645,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255650,"byte_end":255709,"line_start":912,"line_end":912,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255714,"byte_end":255778,"line_start":913,"line_end":913,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":255819,"byte_end":255825,"line_start":914,"line_end":914,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1596},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261838,"byte_end":261842,"line_start":1162,"line_end":1162,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1599}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261585,"byte_end":261631,"line_start":1155,"line_end":1155,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261632,"byte_end":261635,"line_start":1156,"line_end":1156,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261636,"byte_end":261703,"line_start":1157,"line_end":1157,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261704,"byte_end":261739,"line_start":1158,"line_end":1158,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261740,"byte_end":261743,"line_start":1159,"line_end":1159,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261744,"byte_end":261780,"line_start":1160,"line_end":1160,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261781,"byte_end":261826,"line_start":1161,"line_end":1161,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1600},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262196,"byte_end":262204,"line_start":1173,"line_end":1173,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1602}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261882,"byte_end":261935,"line_start":1166,"line_end":1166,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261936,"byte_end":261939,"line_start":1167,"line_end":1167,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`]","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":261940,"byte_end":262011,"line_start":1168,"line_end":1168,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262012,"byte_end":262087,"line_start":1169,"line_end":1169,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262088,"byte_end":262091,"line_start":1170,"line_end":1170,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262092,"byte_end":262128,"line_start":1171,"line_end":1171,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262129,"byte_end":262184,"line_start":1172,"line_end":1172,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1603},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262509,"byte_end":262514,"line_start":1184,"line_end":1184,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1606}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262245,"byte_end":262299,"line_start":1177,"line_end":1177,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262300,"byte_end":262303,"line_start":1178,"line_end":1178,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262304,"byte_end":262372,"line_start":1179,"line_end":1179,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262373,"byte_end":262408,"line_start":1180,"line_end":1180,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262409,"byte_end":262412,"line_start":1181,"line_end":1181,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262413,"byte_end":262449,"line_start":1182,"line_end":1182,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262450,"byte_end":262497,"line_start":1183,"line_end":1183,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1607},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262864,"byte_end":262876,"line_start":1195,"line_end":1195,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1612}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262560,"byte_end":262633,"line_start":1188,"line_end":1188,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262634,"byte_end":262637,"line_start":1189,"line_end":1189,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262638,"byte_end":262713,"line_start":1190,"line_end":1190,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262714,"byte_end":262749,"line_start":1191,"line_end":1191,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262750,"byte_end":262753,"line_start":1192,"line_end":1192,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262754,"byte_end":262790,"line_start":1193,"line_end":1193,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":262791,"byte_end":262852,"line_start":1194,"line_end":1194,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1613},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263296,"byte_end":263306,"line_start":1209,"line_end":1209,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1617},{"krate":0,"index":1618}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263000,"byte_end":263071,"line_start":1202,"line_end":1202,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263072,"byte_end":263075,"line_start":1203,"line_end":1203,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263076,"byte_end":263149,"line_start":1204,"line_end":1204,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263150,"byte_end":263185,"line_start":1205,"line_end":1205,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263186,"byte_end":263189,"line_start":1206,"line_end":1206,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263190,"byte_end":263226,"line_start":1207,"line_end":1207,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263227,"byte_end":263284,"line_start":1208,"line_end":1208,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1619},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263766,"byte_end":263785,"line_start":1223,"line_end":1223,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1623}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263430,"byte_end":263511,"line_start":1216,"line_end":1216,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263512,"byte_end":263515,"line_start":1217,"line_end":1217,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263516,"byte_end":263586,"line_start":1218,"line_end":1218,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263587,"byte_end":263635,"line_start":1219,"line_end":1219,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263636,"byte_end":263639,"line_start":1220,"line_end":1220,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263640,"byte_end":263676,"line_start":1221,"line_end":1221,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263677,"byte_end":263754,"line_start":1222,"line_end":1222,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1624},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":264138,"byte_end":264143,"line_start":1234,"line_end":1234,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1628}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263862,"byte_end":263928,"line_start":1227,"line_end":1227,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263929,"byte_end":263932,"line_start":1228,"line_end":1228,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":263933,"byte_end":264001,"line_start":1229,"line_end":1229,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":264002,"byte_end":264037,"line_start":1230,"line_end":1230,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":264038,"byte_end":264041,"line_start":1231,"line_end":1231,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":264042,"byte_end":264078,"line_start":1232,"line_end":1232,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":264079,"byte_end":264126,"line_start":1233,"line_end":1233,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1784},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":1872,"byte_end":1880,"line_start":76,"line_end":76,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"! A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":1887,"byte_end":1953,"line_start":77,"line_end":77,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1786},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2343,"byte_end":2348,"line_start":89,"line_end":89,"column_start":13,"column_end":18},"name":"rayon","qualname":"::hash_map::rayon","value":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1787}],"decl_id":null,"docs":" [rayon]-based parallel iterator types for hash maps.\n You will rarely need to interact with it directly unless you have need\n to name one of the iterator types.","sig":null,"attributes":[{"value":"cfg(feature = \"rayon\")","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2065,"byte_end":2090,"line_start":83,"line_end":83,"column_start":5,"column_end":30}},{"value":"/ [rayon]-based parallel iterator types for hash maps.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2095,"byte_end":2151,"line_start":84,"line_end":84,"column_start":5,"column_end":61}},{"value":"/ You will rarely need to interact with it directly unless you have need","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2156,"byte_end":2230,"line_start":85,"line_end":85,"column_start":5,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2235,"byte_end":2273,"line_start":86,"line_end":86,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2278,"byte_end":2281,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ [rayon]: https://docs.rs/rayon/1.0/rayon","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2286,"byte_end":2330,"line_start":88,"line_end":88,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":1788},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2427,"byte_end":2435,"line_start":93,"line_end":93,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1789},{"krate":0,"index":1790}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"! A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2442,"byte_end":2508,"line_start":94,"line_end":94,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1790},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2819,"byte_end":2824,"line_start":103,"line_end":103,"column_start":13,"column_end":18},"name":"rayon","qualname":"::hash_set::rayon","value":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1791}],"decl_id":null,"docs":" [rayon]-based parallel iterator types for hash sets.\n You will rarely need to interact with it directly unless you have need\n to name one of the iterator types.","sig":null,"attributes":[{"value":"cfg(feature = \"rayon\")","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2541,"byte_end":2566,"line_start":97,"line_end":97,"column_start":5,"column_end":30}},{"value":"/ [rayon]-based parallel iterator types for hash sets.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2571,"byte_end":2627,"line_start":98,"line_end":98,"column_start":5,"column_end":61}},{"value":"/ You will rarely need to interact with it directly unless you have need","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2632,"byte_end":2706,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2711,"byte_end":2749,"line_start":100,"line_end":100,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2754,"byte_end":2757,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ [rayon]: https://docs.rs/rayon/1.0/rayon","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2762,"byte_end":2806,"line_start":102,"line_end":102,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1843},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":3187,"byte_end":3203,"line_start":116,"line_end":116,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":3071,"byte_end":3144,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":3149,"byte_end":3182,"line_start":115,"line_end":115,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":1845},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":3257,"byte_end":3267,"line_start":119,"line_end":119,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout }","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":3210,"byte_end":3252,"line_start":118,"line_end":118,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":1842},"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":3049,"byte_end":3064,"line_start":113,"line_end":113,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::TryReserveError","value":"TryReserveError::{CapacityOverflow, AllocError}","parent":null,"children":[{"krate":0,"index":1843},{"krate":0,"index":1845}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/lib.rs","byte_start":2955,"byte_end":3000,"line_start":111,"line_end":111,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/sse2.rs","byte_start":6401954,"byte_end":6401959,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/bitmask.rs","byte_start":63145,"byte_end":63152,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/bitmask.rs","byte_start":65265,"byte_end":65272,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/bitmask.rs","byte_start":65560,"byte_end":65571,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":7587,"byte_end":7598,"line_start":73,"line_end":73,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":10329,"byte_end":10337,"line_start":153,"line_end":153,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":15289,"byte_end":15295,"line_start":282,"line_end":282,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":15321,"byte_end":15327,"line_start":284,"line_end":284,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":15460,"byte_end":15466,"line_start":291,"line_end":291,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":18288,"byte_end":18296,"line_start":378,"line_end":378,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":44226,"byte_end":44234,"line_start":1013,"line_end":1013,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":44279,"byte_end":44287,"line_start":1014,"line_end":1014,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":44334,"byte_end":44342,"line_start":1016,"line_end":1016,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":46449,"byte_end":46457,"line_start":1075,"line_end":1075,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":47240,"byte_end":47248,"line_start":1099,"line_end":1099,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":51162,"byte_end":51170,"line_start":1205,"line_end":1205,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":51573,"byte_end":51581,"line_start":1221,"line_end":1221,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":52550,"byte_end":52562,"line_start":1257,"line_end":1257,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":55385,"byte_end":55397,"line_start":1326,"line_end":1326,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":55428,"byte_end":55440,"line_start":1327,"line_end":1327,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":55466,"byte_end":55478,"line_start":1329,"line_end":1329,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":55768,"byte_end":55780,"line_start":1341,"line_end":1341,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":57247,"byte_end":57259,"line_start":1379,"line_end":1379,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":57444,"byte_end":57451,"line_start":1387,"line_end":1387,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":57659,"byte_end":57666,"line_start":1397,"line_end":1397,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58351,"byte_end":58358,"line_start":1420,"line_end":1420,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58391,"byte_end":58398,"line_start":1421,"line_end":1421,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58595,"byte_end":58606,"line_start":1430,"line_end":1430,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58759,"byte_end":58770,"line_start":1437,"line_end":1437,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58815,"byte_end":58826,"line_start":1438,"line_end":1438,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":59442,"byte_end":59453,"line_start":1460,"line_end":1460,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":59942,"byte_end":59953,"line_start":1479,"line_end":1479,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":60293,"byte_end":60304,"line_start":1493,"line_end":1493,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":60337,"byte_end":60348,"line_start":1494,"line_end":1494,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":60888,"byte_end":60896,"line_start":1511,"line_end":1511,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":61053,"byte_end":61061,"line_start":1518,"line_end":1518,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":61110,"byte_end":61118,"line_start":1519,"line_end":1519,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":61161,"byte_end":61169,"line_start":1521,"line_end":1521,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":61873,"byte_end":61881,"line_start":1544,"line_end":1544,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":62274,"byte_end":62282,"line_start":1561,"line_end":1561,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":62319,"byte_end":62327,"line_start":1562,"line_end":1562,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67514,"byte_end":67521,"line_start":22,"line_end":22,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67962,"byte_end":67969,"line_start":39,"line_end":39,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68185,"byte_end":68192,"line_start":46,"line_end":46,"column_start":79,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68728,"byte_end":68735,"line_start":63,"line_end":63,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69104,"byte_end":69111,"line_start":77,"line_end":77,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69315,"byte_end":69322,"line_start":84,"line_end":84,"column_start":67,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69868,"byte_end":69877,"line_start":101,"line_end":101,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70246,"byte_end":70255,"line_start":115,"line_end":115,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70460,"byte_end":70469,"line_start":122,"line_end":122,"column_start":66,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":71207,"byte_end":71217,"line_start":141,"line_end":141,"column_start":65,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":71724,"byte_end":71734,"line_start":159,"line_end":159,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72300,"byte_end":72312,"line_start":177,"line_end":177,"column_start":58,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72730,"byte_end":72742,"line_start":191,"line_end":191,"column_start":66,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73430,"byte_end":73441,"line_start":210,"line_end":210,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73795,"byte_end":73806,"line_start":222,"line_end":222,"column_start":79,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74333,"byte_end":74341,"line_start":239,"line_end":239,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74699,"byte_end":74707,"line_start":252,"line_end":252,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74858,"byte_end":74865,"line_start":259,"line_end":259,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75373,"byte_end":75380,"line_start":273,"line_end":273,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75941,"byte_end":75948,"line_start":288,"line_end":288,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":76524,"byte_end":76531,"line_start":306,"line_end":306,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":77624,"byte_end":77631,"line_start":340,"line_end":340,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":78023,"byte_end":78030,"line_start":357,"line_end":357,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":78375,"byte_end":78382,"line_start":372,"line_end":372,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":87008,"byte_end":87018,"line_start":18,"line_end":18,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":87489,"byte_end":87504,"line_start":36,"line_end":36,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":88177,"byte_end":88191,"line_start":61,"line_end":61,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":89098,"byte_end":89109,"line_start":90,"line_end":90,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":89156,"byte_end":89167,"line_start":92,"line_end":92,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":89694,"byte_end":89705,"line_start":110,"line_end":110,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":90066,"byte_end":90082,"line_start":123,"line_end":123,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":91053,"byte_end":91069,"line_start":155,"line_end":155,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":91395,"byte_end":91403,"line_start":169,"line_end":169,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93023,"byte_end":93034,"line_start":21,"line_end":21,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93716,"byte_end":93724,"line_start":47,"line_end":47,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94576,"byte_end":94583,"line_start":75,"line_end":75,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95266,"byte_end":95279,"line_start":99,"line_end":99,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96144,"byte_end":96166,"line_start":131,"line_end":131,"column_start":37,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96999,"byte_end":97014,"line_start":162,"line_end":162,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97796,"byte_end":97804,"line_start":192,"line_end":192,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98168,"byte_end":98175,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100949,"byte_end":100956,"line_start":283,"line_end":283,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":101356,"byte_end":101363,"line_start":296,"line_end":296,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":101923,"byte_end":101930,"line_start":317,"line_end":317,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":102293,"byte_end":102300,"line_start":333,"line_end":333,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":102612,"byte_end":102619,"line_start":347,"line_end":347,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117062,"byte_end":117069,"line_start":193,"line_end":193,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":781},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117748,"byte_end":117755,"line_start":217,"line_end":217,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118803,"byte_end":118810,"line_start":251,"line_end":251,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129943,"byte_end":129950,"line_start":638,"line_end":638,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":829},{"krate":0,"index":833},{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":843},{"krate":0,"index":846},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143139,"byte_end":143146,"line_start":1047,"line_end":1047,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":146079,"byte_end":146086,"line_start":1105,"line_end":1105,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":146407,"byte_end":146414,"line_start":1121,"line_end":1121,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":146508,"byte_end":146515,"line_start":1129,"line_end":1129,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":146711,"byte_end":146718,"line_start":1139,"line_end":1139,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147008,"byte_end":147015,"line_start":1150,"line_end":1150,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147861,"byte_end":147865,"line_start":1182,"line_end":1182,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148103,"byte_end":148107,"line_start":1192,"line_end":1192,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148885,"byte_end":148892,"line_start":1214,"line_end":1214,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148918,"byte_end":148925,"line_start":1216,"line_end":1216,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149589,"byte_end":149597,"line_start":1238,"line_end":1238,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150252,"byte_end":150256,"line_start":1261,"line_end":1261,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150454,"byte_end":150458,"line_start":1270,"line_end":1270,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150982,"byte_end":150988,"line_start":1288,"line_end":1288,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151188,"byte_end":151194,"line_start":1297,"line_end":1297,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151664,"byte_end":151669,"line_start":1314,"line_end":1314,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152445,"byte_end":152456,"line_start":1341,"line_end":1341,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152709,"byte_end":152718,"line_start":1350,"line_end":1350,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153100,"byte_end":153111,"line_start":1366,"line_end":1366,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155169,"byte_end":155188,"line_start":1432,"line_end":1432,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155262,"byte_end":155281,"line_start":1438,"line_end":1438,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155888,"byte_end":155906,"line_start":1463,"line_end":1463,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1043},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156731,"byte_end":156749,"line_start":1490,"line_end":1490,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1053},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":157705,"byte_end":157720,"line_start":1519,"line_end":1519,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159237,"byte_end":159248,"line_start":1570,"line_end":1570,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163162,"byte_end":163181,"line_start":1698,"line_end":1698,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166366,"byte_end":166383,"line_start":1793,"line_end":1793,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":168402,"byte_end":168420,"line_start":1859,"line_end":1859,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":168597,"byte_end":168608,"line_start":1865,"line_end":1865,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":168939,"byte_end":168958,"line_start":1874,"line_end":1874,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169213,"byte_end":169230,"line_start":1883,"line_end":1883,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169395,"byte_end":169410,"line_start":1889,"line_end":1889,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169999,"byte_end":170004,"line_start":1909,"line_end":1909,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170561,"byte_end":170574,"line_start":1928,"line_end":1928,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170667,"byte_end":170680,"line_start":1935,"line_end":1935,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170782,"byte_end":170795,"line_start":1943,"line_end":1943,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171279,"byte_end":171290,"line_start":1962,"line_end":1962,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171987,"byte_end":171994,"line_start":1988,"line_end":1988,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":172773,"byte_end":172777,"line_start":2017,"line_end":2017,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":173213,"byte_end":173217,"line_start":2032,"line_end":2032,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":173371,"byte_end":173375,"line_start":2039,"line_end":2039,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":173418,"byte_end":173425,"line_start":2041,"line_end":2041,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":173873,"byte_end":173880,"line_start":2056,"line_end":2056,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174033,"byte_end":174040,"line_start":2062,"line_end":2062,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174081,"byte_end":174088,"line_start":2064,"line_end":2064,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174294,"byte_end":174302,"line_start":2074,"line_end":2074,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174633,"byte_end":174641,"line_start":2086,"line_end":2086,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174790,"byte_end":174798,"line_start":2092,"line_end":2092,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174849,"byte_end":174857,"line_start":2094,"line_end":2094,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175019,"byte_end":175023,"line_start":2100,"line_end":2100,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1272}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175372,"byte_end":175376,"line_start":2112,"line_end":2112,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175529,"byte_end":175533,"line_start":2118,"line_end":2118,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175576,"byte_end":175582,"line_start":2120,"line_end":2120,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175931,"byte_end":175937,"line_start":2132,"line_end":2132,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176090,"byte_end":176096,"line_start":2138,"line_end":2138,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176139,"byte_end":176148,"line_start":2140,"line_end":2140,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176505,"byte_end":176514,"line_start":2152,"line_end":2152,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176667,"byte_end":176676,"line_start":2158,"line_end":2158,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176717,"byte_end":176726,"line_start":2160,"line_end":2160,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176942,"byte_end":176947,"line_start":2170,"line_end":2170,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177282,"byte_end":177287,"line_start":2182,"line_end":2182,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177440,"byte_end":177445,"line_start":2188,"line_end":2188,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177486,"byte_end":177491,"line_start":2190,"line_end":2190,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177691,"byte_end":177696,"line_start":2200,"line_end":2200,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":1343},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182447,"byte_end":182452,"line_start":2366,"line_end":2366,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183209,"byte_end":183222,"line_start":2393,"line_end":2393,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190192,"byte_end":190203,"line_start":2623,"line_end":2623,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":192453,"byte_end":192460,"line_start":2706,"line_end":2706,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":193033,"byte_end":193040,"line_start":2724,"line_end":2724,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":194487,"byte_end":194494,"line_start":2769,"line_end":2769,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/scopeguard.rs","byte_start":226719,"byte_end":226729,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1443},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/scopeguard.rs","byte_start":226917,"byte_end":226927,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/scopeguard.rs","byte_start":227106,"byte_end":227116,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231312,"byte_end":231319,"line_start":119,"line_end":119,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1483}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231570,"byte_end":231577,"line_start":132,"line_end":132,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232668,"byte_end":232675,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1499}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235950,"byte_end":235957,"line_start":306,"line_end":306,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1540}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256037,"byte_end":256044,"line_start":924,"line_end":924,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256292,"byte_end":256299,"line_start":938,"line_end":938,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256381,"byte_end":256388,"line_start":945,"line_end":945,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1554}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256609,"byte_end":256616,"line_start":955,"line_end":955,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256924,"byte_end":256931,"line_start":968,"line_end":968,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":257497,"byte_end":257504,"line_start":991,"line_end":991,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":258069,"byte_end":258076,"line_start":1014,"line_end":1014,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1575}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":264466,"byte_end":264473,"line_start":1248,"line_end":1248,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":265348,"byte_end":265352,"line_start":1280,"line_end":1280,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":265536,"byte_end":265540,"line_start":1288,"line_end":1288,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":265869,"byte_end":265873,"line_start":1300,"line_end":1300,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266019,"byte_end":266023,"line_start":1306,"line_end":1306,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266070,"byte_end":266074,"line_start":1308,"line_end":1308,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266231,"byte_end":266239,"line_start":1314,"line_end":1314,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266568,"byte_end":266576,"line_start":1326,"line_end":1326,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1668}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266718,"byte_end":266726,"line_start":1332,"line_end":1332,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266769,"byte_end":266777,"line_start":1334,"line_end":1334,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266991,"byte_end":266996,"line_start":1341,"line_end":1341,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267329,"byte_end":267334,"line_start":1353,"line_end":1353,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267480,"byte_end":267485,"line_start":1359,"line_end":1359,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267532,"byte_end":267537,"line_start":1361,"line_end":1361,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267755,"byte_end":267767,"line_start":1368,"line_end":1368,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1693}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267986,"byte_end":267998,"line_start":1378,"line_end":1378,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":268536,"byte_end":268548,"line_start":1402,"line_end":1402,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1704}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":268773,"byte_end":268785,"line_start":1412,"line_end":1412,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":268866,"byte_end":268876,"line_start":1419,"line_end":1419,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":269093,"byte_end":269103,"line_start":1429,"line_end":1429,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":269645,"byte_end":269655,"line_start":1453,"line_end":1453,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":269741,"byte_end":269751,"line_start":1460,"line_end":1460,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1725}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":269968,"byte_end":269987,"line_start":1470,"line_end":1470,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":270193,"byte_end":270212,"line_start":1479,"line_end":1479,"column_start":29,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":270584,"byte_end":270603,"line_start":1496,"line_end":1496,"column_start":30,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":270689,"byte_end":270708,"line_start":1503,"line_end":1503,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":270925,"byte_end":270930,"line_start":1513,"line_end":1513,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":271123,"byte_end":271128,"line_start":1522,"line_end":1522,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":271214,"byte_end":271219,"line_start":1529,"line_end":1529,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":271443,"byte_end":271448,"line_start":1539,"line_end":1539,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/sse2.rs","byte_start":6401954,"byte_end":6401959,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/bitmask.rs","byte_start":63145,"byte_end":63152,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/bitmask.rs","byte_start":65265,"byte_end":65272,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1826},"to":{"krate":1,"index":4759}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/bitmask.rs","byte_start":65560,"byte_end":65571,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":39},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":7587,"byte_end":7598,"line_start":73,"line_end":73,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1832},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":10329,"byte_end":10337,"line_start":153,"line_end":153,"column_start":19,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":61},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":15289,"byte_end":15295,"line_start":282,"line_end":282,"column_start":25,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":72},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":15321,"byte_end":15327,"line_start":284,"line_end":284,"column_start":19,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":72},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":15460,"byte_end":15466,"line_start":291,"line_end":291,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":72},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":18288,"byte_end":18296,"line_start":378,"line_end":378,"column_start":9,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":44226,"byte_end":44234,"line_start":1013,"line_end":1013,"column_start":25,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":44279,"byte_end":44287,"line_start":1014,"line_end":1014,"column_start":25,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":1916}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":44334,"byte_end":44342,"line_start":1016,"line_end":1016,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":46449,"byte_end":46457,"line_start":1075,"line_end":1075,"column_start":34,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":94},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":47240,"byte_end":47248,"line_start":1099,"line_end":1099,"column_start":16,"column_end":24},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":51162,"byte_end":51170,"line_start":1205,"line_end":1205,"column_start":18,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":51573,"byte_end":51581,"line_start":1221,"line_end":1221,"column_start":26,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":4759}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":52550,"byte_end":52562,"line_start":1257,"line_end":1257,"column_start":9,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":55385,"byte_end":55397,"line_start":1326,"line_end":1326,"column_start":25,"column_end":37},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":185},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":55428,"byte_end":55440,"line_start":1327,"line_end":1327,"column_start":25,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":185},"to":{"krate":1,"index":1916}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":55466,"byte_end":55478,"line_start":1329,"line_end":1329,"column_start":19,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":185},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":55768,"byte_end":55780,"line_start":1341,"line_end":1341,"column_start":22,"column_end":34},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":185},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":57247,"byte_end":57259,"line_start":1379,"line_end":1379,"column_start":27,"column_end":39},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":185},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":57444,"byte_end":57451,"line_start":1387,"line_end":1387,"column_start":19,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":57659,"byte_end":57666,"line_start":1397,"line_end":1397,"column_start":22,"column_end":29},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58351,"byte_end":58358,"line_start":1420,"line_end":1420,"column_start":31,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58391,"byte_end":58398,"line_start":1421,"line_end":1421,"column_start":27,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58595,"byte_end":58606,"line_start":1430,"line_end":1430,"column_start":9,"column_end":20},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58759,"byte_end":58770,"line_start":1437,"line_end":1437,"column_start":25,"column_end":36},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":225},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":58815,"byte_end":58826,"line_start":1438,"line_end":1438,"column_start":25,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":225},"to":{"krate":1,"index":1916}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":59442,"byte_end":59453,"line_start":1460,"line_end":1460,"column_start":18,"column_end":29},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":225},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":59942,"byte_end":59953,"line_start":1479,"line_end":1479,"column_start":22,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":225},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":60293,"byte_end":60304,"line_start":1493,"line_end":1493,"column_start":31,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":225},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":60337,"byte_end":60348,"line_start":1494,"line_end":1494,"column_start":27,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":225},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":60888,"byte_end":60896,"line_start":1511,"line_end":1511,"column_start":9,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":61053,"byte_end":61061,"line_start":1518,"line_end":1518,"column_start":25,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":249},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":61110,"byte_end":61118,"line_start":1519,"line_end":1519,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":249},"to":{"krate":1,"index":1916}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":61161,"byte_end":61169,"line_start":1521,"line_end":1521,"column_start":18,"column_end":26},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":249},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":61873,"byte_end":61881,"line_start":1544,"line_end":1544,"column_start":22,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":249},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":62274,"byte_end":62282,"line_start":1561,"line_end":1561,"column_start":31,"column_end":39},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":249},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/raw/mod.rs","byte_start":62319,"byte_end":62327,"line_start":1562,"line_end":1562,"column_start":27,"column_end":35},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":249},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67514,"byte_end":67521,"line_start":22,"line_end":22,"column_start":58,"column_end":65},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":300},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":67962,"byte_end":67969,"line_start":39,"line_end":39,"column_start":25,"column_end":32},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":300},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68185,"byte_end":68192,"line_start":46,"line_end":46,"column_start":79,"column_end":86},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":300},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":68728,"byte_end":68735,"line_start":63,"line_end":63,"column_start":58,"column_end":65},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":325},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69104,"byte_end":69111,"line_start":77,"line_end":77,"column_start":25,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69315,"byte_end":69322,"line_start":84,"line_end":84,"column_start":67,"column_end":74},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":69868,"byte_end":69877,"line_start":101,"line_end":101,"column_start":58,"column_end":67},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":350},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70246,"byte_end":70255,"line_start":115,"line_end":115,"column_start":25,"column_end":34},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":70460,"byte_end":70469,"line_start":122,"line_end":122,"column_start":66,"column_end":75},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":71207,"byte_end":71217,"line_start":141,"line_end":141,"column_start":65,"column_end":75},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":375},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":71724,"byte_end":71734,"line_start":159,"line_end":159,"column_start":9,"column_end":19},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72300,"byte_end":72312,"line_start":177,"line_end":177,"column_start":58,"column_end":70},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":395},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":72730,"byte_end":72742,"line_start":191,"line_end":191,"column_start":66,"column_end":78},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":395},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73430,"byte_end":73441,"line_start":210,"line_end":210,"column_start":54,"column_end":65},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":415},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":73795,"byte_end":73806,"line_start":222,"line_end":222,"column_start":79,"column_end":90},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74333,"byte_end":74341,"line_start":239,"line_end":239,"column_start":54,"column_end":62},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":432},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74699,"byte_end":74707,"line_start":252,"line_end":252,"column_start":9,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":432},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":74858,"byte_end":74865,"line_start":259,"line_end":259,"column_start":33,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75373,"byte_end":75380,"line_start":273,"line_end":273,"column_start":33,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":75941,"byte_end":75948,"line_start":288,"line_end":288,"column_start":15,"column_end":22},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":76524,"byte_end":76531,"line_start":306,"line_end":306,"column_start":58,"column_end":65},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":771},"to":{"krate":5,"index":3695}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":77624,"byte_end":77631,"line_start":340,"line_end":340,"column_start":48,"column_end":55},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":771},"to":{"krate":5,"index":3988}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":78023,"byte_end":78030,"line_start":357,"line_end":357,"column_start":42,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":771},"to":{"krate":5,"index":3992}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/map.rs","byte_start":78375,"byte_end":78382,"line_start":372,"line_end":372,"column_start":54,"column_end":61},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":771},"to":{"krate":5,"index":3992}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":87008,"byte_end":87018,"line_start":18,"line_end":18,"column_start":30,"column_end":40},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":533},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":87489,"byte_end":87504,"line_start":36,"line_end":36,"column_start":31,"column_end":46},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":541},"to":{"krate":5,"index":190}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":88177,"byte_end":88191,"line_start":61,"line_end":61,"column_start":36,"column_end":50},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":551},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":89098,"byte_end":89109,"line_start":90,"line_end":90,"column_start":25,"column_end":36},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":89156,"byte_end":89167,"line_start":92,"line_end":92,"column_start":36,"column_end":47},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":560},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":89694,"byte_end":89705,"line_start":110,"line_end":110,"column_start":18,"column_end":29},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":90066,"byte_end":90082,"line_start":123,"line_end":123,"column_start":37,"column_end":53},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":576},"to":{"krate":5,"index":190}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":91053,"byte_end":91069,"line_start":155,"line_end":155,"column_start":18,"column_end":34},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/raw.rs","byte_start":91395,"byte_end":91403,"line_start":169,"line_end":169,"column_start":9,"column_end":17},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93023,"byte_end":93034,"line_start":21,"line_end":21,"column_start":45,"column_end":56},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":605},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":93716,"byte_end":93724,"line_start":47,"line_end":47,"column_start":45,"column_end":53},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":616},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":94576,"byte_end":94583,"line_start":75,"line_end":75,"column_start":49,"column_end":56},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":628},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":95266,"byte_end":95279,"line_start":99,"line_end":99,"column_start":37,"column_end":50},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":640},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96144,"byte_end":96166,"line_start":131,"line_end":131,"column_start":37,"column_end":59},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":654},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":96999,"byte_end":97014,"line_start":162,"line_end":162,"column_start":37,"column_end":52},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":667},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":97796,"byte_end":97804,"line_start":192,"line_end":192,"column_start":37,"column_end":45},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":681},"to":{"krate":5,"index":3721}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":98168,"byte_end":98175,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":100949,"byte_end":100956,"line_start":283,"line_end":283,"column_start":12,"column_end":19},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":101356,"byte_end":101363,"line_start":296,"line_end":296,"column_start":49,"column_end":56},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1475},"to":{"krate":5,"index":3695}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":101923,"byte_end":101930,"line_start":317,"line_end":317,"column_start":40,"column_end":47},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1475},"to":{"krate":5,"index":3988}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":102293,"byte_end":102300,"line_start":333,"line_end":333,"column_start":34,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1475},"to":{"krate":5,"index":3992}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/external_trait_impls/rayon/set.rs","byte_start":102612,"byte_end":102619,"line_start":347,"line_end":347,"column_start":42,"column_end":49},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1475},"to":{"krate":5,"index":3992}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117062,"byte_end":117069,"line_start":193,"line_end":193,"column_start":46,"column_end":53},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":117748,"byte_end":117755,"line_start":217,"line_end":217,"column_start":12,"column_end":19},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":118803,"byte_end":118810,"line_start":251,"line_end":251,"column_start":15,"column_end":22},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":129943,"byte_end":129950,"line_start":638,"line_end":638,"column_start":15,"column_end":22},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":143139,"byte_end":143146,"line_start":1047,"line_end":1047,"column_start":15,"column_end":22},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":146079,"byte_end":146086,"line_start":1105,"line_end":1105,"column_start":29,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":146407,"byte_end":146414,"line_start":1121,"line_end":1121,"column_start":22,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":1639}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":146508,"byte_end":146515,"line_start":1129,"line_end":1129,"column_start":25,"column_end":32},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":146711,"byte_end":146718,"line_start":1139,"line_end":1139,"column_start":27,"column_end":34},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147008,"byte_end":147015,"line_start":1150,"line_end":1150,"column_start":40,"column_end":47},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":2154}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":147861,"byte_end":147865,"line_start":1182,"line_end":1182,"column_start":22,"column_end":26},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148103,"byte_end":148107,"line_start":1192,"line_end":1192,"column_start":41,"column_end":45},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148885,"byte_end":148892,"line_start":1214,"line_end":1214,"column_start":40,"column_end":47},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":900},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":148918,"byte_end":148925,"line_start":1216,"line_end":1216,"column_start":12,"column_end":19},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":900},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":149589,"byte_end":149597,"line_start":1238,"line_end":1238,"column_start":12,"column_end":20},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":913},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150252,"byte_end":150256,"line_start":1261,"line_end":1261,"column_start":22,"column_end":26},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":921},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150454,"byte_end":150458,"line_start":1270,"line_end":1270,"column_start":34,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":921},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":150982,"byte_end":150988,"line_start":1288,"line_end":1288,"column_start":22,"column_end":28},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151188,"byte_end":151194,"line_start":1297,"line_end":1297,"column_start":34,"column_end":40},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":151664,"byte_end":151669,"line_start":1314,"line_end":1314,"column_start":12,"column_end":17},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152445,"byte_end":152456,"line_start":1341,"line_end":1341,"column_start":28,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":956},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":152709,"byte_end":152718,"line_start":1350,"line_end":1350,"column_start":40,"column_end":49},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":970},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":153100,"byte_end":153111,"line_start":1366,"line_end":1366,"column_start":28,"column_end":39},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":956},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155169,"byte_end":155188,"line_start":1432,"line_end":1432,"column_start":28,"column_end":47},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1013},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155262,"byte_end":155281,"line_start":1438,"line_end":1438,"column_start":28,"column_end":47},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1013},"to":{"krate":1,"index":1916}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":155888,"byte_end":155906,"line_start":1463,"line_end":1463,"column_start":19,"column_end":37},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":156731,"byte_end":156749,"line_start":1490,"line_end":1490,"column_start":19,"column_end":37},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":157705,"byte_end":157720,"line_start":1519,"line_end":1519,"column_start":19,"column_end":34},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":159237,"byte_end":159248,"line_start":1570,"line_end":1570,"column_start":19,"column_end":30},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1002},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":163162,"byte_end":163181,"line_start":1698,"line_end":1698,"column_start":16,"column_end":35},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1013},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":166366,"byte_end":166383,"line_start":1793,"line_end":1793,"column_start":19,"column_end":36},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":168402,"byte_end":168420,"line_start":1859,"line_end":1859,"column_start":25,"column_end":43},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":996},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":168597,"byte_end":168608,"line_start":1865,"line_end":1865,"column_start":39,"column_end":50},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1002},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":168939,"byte_end":168958,"line_start":1874,"line_end":1874,"column_start":36,"column_end":55},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1013},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169213,"byte_end":169230,"line_start":1883,"line_end":1883,"column_start":25,"column_end":42},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169395,"byte_end":169410,"line_start":1889,"line_end":1889,"column_start":25,"column_end":40},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1032},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":169999,"byte_end":170004,"line_start":1909,"line_end":1909,"column_start":39,"column_end":44},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1141},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170561,"byte_end":170574,"line_start":1928,"line_end":1928,"column_start":31,"column_end":44},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":1904}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170667,"byte_end":170680,"line_start":1935,"line_end":1935,"column_start":31,"column_end":44},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":1916}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":170782,"byte_end":170795,"line_start":1943,"line_end":1943,"column_start":39,"column_end":52},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171279,"byte_end":171290,"line_start":1962,"line_end":1962,"column_start":32,"column_end":43},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1178},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":171987,"byte_end":171994,"line_start":1988,"line_end":1988,"column_start":32,"column_end":39},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":4759}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":172773,"byte_end":172777,"line_start":2017,"line_end":2017,"column_start":29,"column_end":33},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":173213,"byte_end":173217,"line_start":2032,"line_end":2032,"column_start":34,"column_end":38},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":173371,"byte_end":173375,"line_start":2039,"line_end":2039,"column_start":30,"column_end":34},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":173418,"byte_end":173425,"line_start":2041,"line_end":2041,"column_start":29,"column_end":36},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":900},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":173873,"byte_end":173880,"line_start":2056,"line_end":2056,"column_start":34,"column_end":41},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":900},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174033,"byte_end":174040,"line_start":2062,"line_end":2062,"column_start":30,"column_end":37},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":900},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174081,"byte_end":174088,"line_start":2064,"line_end":2064,"column_start":27,"column_end":34},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":900},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174294,"byte_end":174302,"line_start":2074,"line_end":2074,"column_start":25,"column_end":33},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":913},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174633,"byte_end":174641,"line_start":2086,"line_end":2086,"column_start":34,"column_end":42},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":913},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174790,"byte_end":174798,"line_start":2092,"line_end":2092,"column_start":30,"column_end":38},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":913},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":174849,"byte_end":174857,"line_start":2094,"line_end":2094,"column_start":41,"column_end":49},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":913},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175019,"byte_end":175023,"line_start":2100,"line_end":2100,"column_start":29,"column_end":33},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":921},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175372,"byte_end":175376,"line_start":2112,"line_end":2112,"column_start":34,"column_end":38},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":921},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175529,"byte_end":175533,"line_start":2118,"line_end":2118,"column_start":30,"column_end":34},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":921},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175576,"byte_end":175582,"line_start":2120,"line_end":2120,"column_start":29,"column_end":35},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":175931,"byte_end":175937,"line_start":2132,"line_end":2132,"column_start":34,"column_end":40},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176090,"byte_end":176096,"line_start":2138,"line_end":2138,"column_start":30,"column_end":36},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176139,"byte_end":176148,"line_start":2140,"line_end":2140,"column_start":29,"column_end":38},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":991},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176505,"byte_end":176514,"line_start":2152,"line_end":2152,"column_start":34,"column_end":43},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":991},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176667,"byte_end":176676,"line_start":2158,"line_end":2158,"column_start":30,"column_end":39},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":991},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176717,"byte_end":176726,"line_start":2160,"line_end":2160,"column_start":27,"column_end":36},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":991},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":176942,"byte_end":176947,"line_start":2170,"line_end":2170,"column_start":29,"column_end":34},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":947},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177282,"byte_end":177287,"line_start":2182,"line_end":2182,"column_start":34,"column_end":39},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":947},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177440,"byte_end":177445,"line_start":2188,"line_end":2188,"column_start":30,"column_end":35},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":947},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177486,"byte_end":177491,"line_start":2190,"line_end":2190,"column_start":27,"column_end":32},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":947},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":177691,"byte_end":177696,"line_start":2200,"line_end":2200,"column_start":19,"column_end":24},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":182447,"byte_end":182452,"line_start":2366,"line_end":2366,"column_start":28,"column_end":33},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":183209,"byte_end":183222,"line_start":2393,"line_end":2393,"column_start":19,"column_end":32},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":190192,"byte_end":190203,"line_start":2623,"line_end":2623,"column_start":19,"column_end":30},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":192453,"byte_end":192460,"line_start":2706,"line_end":2706,"column_start":40,"column_end":47},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":4755}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":193033,"byte_end":193040,"line_start":2724,"line_end":2724,"column_start":34,"column_end":41},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":4768}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/map.rs","byte_start":194487,"byte_end":194494,"line_start":2769,"line_end":2769,"column_start":46,"column_end":53},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":4768}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/scopeguard.rs","byte_start":226719,"byte_end":226729,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1432},"to":{"krate":1,"index":2073}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/scopeguard.rs","byte_start":226917,"byte_end":226927,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1432},"to":{"krate":1,"index":2086}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/scopeguard.rs","byte_start":227106,"byte_end":227116,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1432},"to":{"krate":1,"index":2097}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231312,"byte_end":231319,"line_start":119,"line_end":119,"column_start":36,"column_end":43},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":231570,"byte_end":231577,"line_start":132,"line_end":132,"column_start":20,"column_end":27},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":232668,"byte_end":232675,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":235950,"byte_end":235957,"line_start":306,"line_end":306,"column_start":12,"column_end":19},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256037,"byte_end":256044,"line_start":924,"line_end":924,"column_start":26,"column_end":33},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256292,"byte_end":256299,"line_start":938,"line_end":938,"column_start":19,"column_end":26},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":1639}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256381,"byte_end":256388,"line_start":945,"line_end":945,"column_start":27,"column_end":34},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256609,"byte_end":256616,"line_start":955,"line_end":955,"column_start":32,"column_end":39},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":4755}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":256924,"byte_end":256931,"line_start":968,"line_end":968,"column_start":26,"column_end":33},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":4768}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":257497,"byte_end":257504,"line_start":991,"line_end":991,"column_start":34,"column_end":41},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":4768}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":258069,"byte_end":258076,"line_start":1014,"line_end":1014,"column_start":24,"column_end":31},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":264466,"byte_end":264473,"line_start":1248,"line_end":1248,"column_start":29,"column_end":36},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1475},"to":{"krate":1,"index":4759}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":265348,"byte_end":265352,"line_start":1280,"line_end":1280,"column_start":19,"column_end":23},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1596},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":265536,"byte_end":265540,"line_start":1288,"line_end":1288,"column_start":26,"column_end":30},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1596},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":265869,"byte_end":265873,"line_start":1300,"line_end":1300,"column_start":35,"column_end":39},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1596},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266019,"byte_end":266023,"line_start":1306,"line_end":1306,"column_start":27,"column_end":31},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1596},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266070,"byte_end":266074,"line_start":1308,"line_end":1308,"column_start":36,"column_end":40},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1596},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266231,"byte_end":266239,"line_start":1314,"line_end":1314,"column_start":22,"column_end":30},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1600},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266568,"byte_end":266576,"line_start":1326,"line_end":1326,"column_start":31,"column_end":39},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1600},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266718,"byte_end":266726,"line_start":1332,"line_end":1332,"column_start":27,"column_end":35},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1600},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266769,"byte_end":266777,"line_start":1334,"line_end":1334,"column_start":36,"column_end":44},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1600},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":266991,"byte_end":266996,"line_start":1341,"line_end":1341,"column_start":22,"column_end":27},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1603},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267329,"byte_end":267334,"line_start":1353,"line_end":1353,"column_start":31,"column_end":36},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1603},"to":{"krate":1,"index":4807}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267480,"byte_end":267485,"line_start":1359,"line_end":1359,"column_start":27,"column_end":32},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1603},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267532,"byte_end":267537,"line_start":1361,"line_end":1361,"column_start":36,"column_end":41},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1603},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267755,"byte_end":267767,"line_start":1368,"line_end":1368,"column_start":22,"column_end":34},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":267986,"byte_end":267998,"line_start":1378,"line_end":1378,"column_start":29,"column_end":41},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":268536,"byte_end":268548,"line_start":1402,"line_end":1402,"column_start":27,"column_end":39},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":268773,"byte_end":268785,"line_start":1412,"line_end":1412,"column_start":30,"column_end":42},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":268866,"byte_end":268876,"line_start":1419,"line_end":1419,"column_start":22,"column_end":32},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1613},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":269093,"byte_end":269103,"line_start":1429,"line_end":1429,"column_start":29,"column_end":39},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1613},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":269645,"byte_end":269655,"line_start":1453,"line_end":1453,"column_start":30,"column_end":40},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1613},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":269741,"byte_end":269751,"line_start":1460,"line_end":1460,"column_start":27,"column_end":37},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1613},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":269968,"byte_end":269987,"line_start":1470,"line_end":1470,"column_start":22,"column_end":41},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1619},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":270193,"byte_end":270212,"line_start":1479,"line_end":1479,"column_start":29,"column_end":48},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1619},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":270584,"byte_end":270603,"line_start":1496,"line_end":1496,"column_start":30,"column_end":49},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1619},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":270689,"byte_end":270708,"line_start":1503,"line_end":1503,"column_start":27,"column_end":46},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1619},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":270925,"byte_end":270930,"line_start":1513,"line_end":1513,"column_start":22,"column_end":27},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1624},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":271123,"byte_end":271128,"line_start":1522,"line_end":1522,"column_start":30,"column_end":35},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1624},"to":{"krate":1,"index":5114}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":271214,"byte_end":271219,"line_start":1529,"line_end":1529,"column_start":27,"column_end":32},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1624},"to":{"krate":1,"index":6069}},{"span":{"file_name":"/home/aaron/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.0/src/set.rs","byte_start":271443,"byte_end":271448,"line_start":1539,"line_end":1539,"column_start":29,"column_end":34},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1624},"to":{"krate":1,"index":4852}}]}